import{r as n,o as a,c as s,a as e,b as t,w as p,F as o,d as c,f as l}from"./app.554c1b80.js";const r={},i=e("h1",{id:"threads",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#threads","aria-hidden":"true"},"#"),c(" Threads")],-1),u=e("p",null,"Threads can be thought of as temporary sub-channels inside an existing channel, to help better organize conversation in a busy channel.",-1),d=e("h2",{id:"thread-related-gateway-events",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#thread-related-gateway-events","aria-hidden":"true"},"#"),c(" Thread related gateway events")],-1),k={class:"custom-container tip"},h=e("p",{class:"custom-container-title"},"TIP",-1),m=c("You can use the "),b=c(" type guard to make sure a channel is a "),g=c("!"),v=e("p",null,"Threads introduce a number of new gateway events, which are listed below:",-1),w=c(": Emitted whenever a thread is created or when the client user is added to a thread. "),f=c(": Emitted whenever a thread is deleted. "),y=c(": Emitted whenever a thread is updated (e.g. name change, archive state change, locked state change). "),T=c(": Emitted whenever the client user gains access to a text or news channel that contains threads. "),j=c(": Emitted whenever members are added or removed from a thread. Requires `GUILD_MEMBERS` privileged intent. "),x=c(": Emitted whenever the client user's thread member is updated. "),A=e("h2",{id:"creating-and-deleting-threads",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-and-deleting-threads","aria-hidden":"true"},"#"),c(" Creating and deleting threads")],-1),C=c("Threads are created and deleted using the "),M=c(" of a text or news channel. To create a thread you call the "),D=c(" method:"),E=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> <span class="token keyword">await</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">,</span>\n\tautoArchiveDuration<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n\treason<span class="token operator">:</span> <span class="token string">&#39;Needed a separate thread for food&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Created thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>thread<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),I=c("To delete a thread, use the "),L=c(" method:"),R=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> thread<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="joining-and-leaving-threads" tabindex="-1"><a class="header-anchor" href="#joining-and-leaving-threads" aria-hidden="true">#</a> Joining and leaving threads</h2>',2),N=c("To join your client to a ThreadChannel, use the "),P=c(" method:"),G=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token punctuation">.</span>joinable<span class="token punctuation">)</span> <span class="token keyword">await</span> thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),_=c("And to leave one, use "),U=c(";"),S=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> thread<span class="token punctuation">.</span><span class="token function">leave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="archiving-unarchiving-and-locking-threads" tabindex="-1"><a class="header-anchor" href="#archiving-unarchiving-and-locking-threads" aria-hidden="true">#</a> Archiving, unarchiving, and locking threads</h2><p>A thread can be either active or archived. Changing a thread from archived to active is referred to as unarchiving the thread. Threads that have <code>locked</code> set to true can only be unarchived by a member with the <code>MANAGE_THREADS</code> permission.</p><p>Threads are automatically archived after inactivity. &quot;Activity&quot; is defined as sending a message, unarchiving a thread, or changing the auto-archive time.</p>',4),$=c("To archive or unarchive a thread, use the "),q=c(" method and pass in a boolean parameter:"),H=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> thread<span class="token punctuation">.</span><span class="token function">setArchived</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// archived</span>\n<span class="token keyword">await</span> thread<span class="token punctuation">.</span><span class="token function">setArchived</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unarchived</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),F=c("This same principle applies to locking and unlocking a thread via the "),V=c(" method:"),W=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> thread<span class="token punctuation">.</span><span class="token function">setLocked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// locked</span>\n<span class="token keyword">await</span> thread<span class="token punctuation">.</span><span class="token function">setLocked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unlocked</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Archived threads can&#39;t be locked!</p></div><h2 id="public-and-private-threads" tabindex="-1"><a class="header-anchor" href="#public-and-private-threads" aria-hidden="true">#</a> Public and private threads</h2>',3),Y=c("Public threads are viewable by everyone who can view the parent channel of the thread. Public threads can be created with the "),z=c(" method."),B=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> <span class="token keyword">await</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">,</span>\n\tautoArchiveDuration<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n\treason<span class="token operator">:</span> <span class="token string">&#39;Needed a separate thread for food&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Created thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>thread<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),J=c("They can also be created from an existing message with the "),K=c(' method, but will be "orphaned" if that message is deleted.'),O=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> <span class="token keyword">await</span> message<span class="token punctuation">.</span><span class="token function">startThread</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">,</span>\n\tautoArchiveDuration<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n\treason<span class="token operator">:</span> <span class="token string">&#39;Needed a separate thread for food&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Created thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>thread<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>The created thread and the message it originated from will share the same ID. The type of thread created matches the parent channel&#39;s type.</p><p>Private threads behave similar to Group DMs, but in a Guild. Private threads can only be created on text channels.</p>',3),Q=c("To create a private thread, use "),X=c(" and pass in "),Z=e("code",null,"GUILD_PRIVATE_THREAD",-1),nn=c(" as the "),an=e("code",null,"type",-1),sn=c(":"),en=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> <span class="token keyword">await</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;mod-talk&#39;</span><span class="token punctuation">,</span>\n\tautoArchiveDuration<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n\ttype<span class="token operator">:</span> <span class="token string">&#39;GUILD_PRIVATE_THREAD&#39;</span><span class="token punctuation">,</span>\n\treason<span class="token operator">:</span> <span class="token string">&#39;Needed a separate thread for moderation&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Created thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>thread<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="adding-and-removing-members" tabindex="-1"><a class="header-anchor" href="#adding-and-removing-members" aria-hidden="true">#</a> Adding and removing members</h2><p>You can add and remove members to and from a thread channel.</p>',3),tn=c("To add a member to a thread, use the "),pn=c(" method:"),on=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> thread<span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;140214425276776449&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),cn=c("And to remove a member from a thread, use "),ln=c(":"),rn=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> thread <span class="token operator">=</span> channel<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;food-talk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> thread<span class="token punctuation">.</span>members<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;140214425276776449&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="sending-messages-to-threads-with-webhooks" tabindex="-1"><a class="header-anchor" href="#sending-messages-to-threads-with-webhooks" aria-hidden="true">#</a> Sending messages to threads with webhooks</h2>',2),un=c("It is possible for a webhook built on the parent channel to send messages to the channel's threads. For the purpose of this example, it is assumed a single webhook already exists for that channel. If you wish to learn more about webhooks, see our "),dn=c("webhook guide"),kn=c("."),hn=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> webhooks <span class="token operator">=</span> <span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">fetchWebhooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> webhook <span class="token operator">=</span> webhooks<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">await</span> webhook<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tcontent<span class="token operator">:</span> <span class="token string">&#39;Look ma! I\\&#39;m in a thread!&#39;</span><span class="token punctuation">,</span>\n\tthreadId<span class="token operator">:</span> <span class="token string">&#39;123456789012345678&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>And that&#39;s it! Now you know all there is to know on working with threads using discord.js!</p>',2);r.render=function(c,l){const r=n("DocsLink"),mn=n("RouterLink");return a(),s(o,null,[i,u,d,e("div",k,[h,e("p",null,[m,t(r,{path:"class/ThreadChannel?scrollTo=isThread",type:"method"}),b,t(r,{path:"class/ThreadChannel"}),g])]),v,e("ul",null,[e("li",null,[t(r,{path:"class/Client?scrollTo=e-threadCreate"}),w]),e("li",null,[t(r,{path:"class/Client?scrollTo=e-threadDelete"}),f]),e("li",null,[t(r,{path:"class/Client?scrollTo=e-threadUpdate"}),y]),e("li",null,[t(r,{path:"class/Client?scrollTo=e-threadListSync"}),T]),e("li",null,[t(r,{path:"class/Client?scrollTo=e-threadMembersUpdate"}),j]),e("li",null,[t(r,{path:"class/Client?scrollTo=e-threadMemberUpdate"}),x])]),A,e("p",null,[C,t(r,{path:"class/ThreadManager"}),M,t(r,{path:"class/ThreadManager?scrollTo=create",type:"method"}),D]),E,e("p",null,[I,t(r,{path:"class/ThreadChannel?scrollTo=delete",type:"method"}),L]),R,e("p",null,[N,t(r,{path:"class/ThreadChannel?scrollTo=join",type:"method"}),P]),G,e("p",null,[_,t(r,{path:"class/ThreadChannel?scrollTo=leave",type:"method"}),U]),S,e("p",null,[$,t(r,{path:"class/ThreadChannel?scrollTo=setArchived",type:"method"}),q]),H,e("p",null,[F,t(r,{path:"class/ThreadChannel?scrollTo=setLocked",type:"method"}),V]),W,e("p",null,[Y,t(r,{path:"class/ThreadManager?scrollTo=create",type:"method"}),z]),B,e("p",null,[J,t(r,{path:"class/Message?scrollTo=startThread",type:"method"}),K]),O,e("p",null,[Q,t(r,{path:"class/ThreadManager?scrollTo=create",type:"method"}),X,Z,nn,an,sn]),en,e("p",null,[tn,t(r,{path:"class/ThreadMemberManager?scrollTo=add",type:"method"}),pn]),on,e("p",null,[cn,t(r,{path:"class/ThreadMemberManager?scrollTo=remove",type:"method"}),ln]),rn,e("p",null,[un,t(mn,{to:"/popular-topics/webhooks.html"},{default:p((()=>[dn])),_:1}),kn]),hn],64)};export{r as default};
