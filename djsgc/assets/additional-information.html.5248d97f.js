import{r as n,o as a,c as s,a as e,b as t,w as o,F as p,d as c,f as i}from"./app.554c1b80.js";const r={},l=e("h1",{id:"additional-information",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#additional-information","aria-hidden":"true"},"#"),c(" Additional information")],-1),u={class:"custom-container tip"},d=e("p",{class:"custom-container-title"},"TIP",-1),h=c("This page is a follow-up and bases its code on "),k=c("the previous page"),g=c("."),m=i('<p>Here are some extra topics covered about sharding that might have raised concerns.</p><h2 id="legend" tabindex="-1"><a class="header-anchor" href="#legend" aria-hidden="true">#</a> Legend</h2><ul><li><code>manager</code> is an instance of <code>ShardingManager</code>, e.g. <code>const manager = new ShardingManager(file, options);</code></li><li><code>client.shard</code> refers to the current shard.</li></ul><h2 id="shard-messages" tabindex="-1"><a class="header-anchor" href="#shard-messages" aria-hidden="true">#</a> Shard messages</h2><p>For shards to communicate, they have to send messages to one another, as they each have another process. You must wait for each shard to finish spawning before you can listen to their events, otherwise <code>ShardingManager#shards</code> will be an empty <code>Collection</code>. You can listen for these messages on the individual shards by adding the following lines in your <code>index.js</code> file:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>manager<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">shards</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tshards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">shard</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\tshard<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">message</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Shard[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>shard<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token punctuation">.</span>_eval<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token punctuation">.</span>_result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>As the property names imply, the <code>_eval</code> property is what the shard is attempting to evaluate, and the <code>_result</code> property is the output of said evaluation. However, these properties are only guaranteed if a <em>shard</em> is sending a message. There will also be an <code>_error</code> property, should the evaluation have thrown an error.</p>',7),b=c("You can also send messages via "),f=e("code",null,"process.send('hello')",-1),v=c(", which would not contain the same information. This is why the "),y=e("code",null,".message",-1),w=c(" property's type is declared as "),x=e("code",null,"*",-1),j=c(" in the "),T=c(" documentation."),S=e("h2",{id:"specific-shards",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#specific-shards","aria-hidden":"true"},"#"),c(" Specific shards")],-1),A=e("p",null,"There might be times where you want to target a specific shard. An example would be to kill a specific shard that isn't working as intended. You can achieve this by taking the following snippet (in a command, preferably):",-1),_={class:"custom-container tip"},E=e("p",{class:"custom-container-title"},"TIP",-1),I=c("In discord.js v13, "),M=e("code",null,"Client#shard",-1),N=c(" can hold multiple ids. If you use the default sharding manager, the "),Y=e("code",null,".ids",-1),C=c(" array will only have one entry."),F=i('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>shard<span class="token punctuation">.</span>ids<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),L=c("If you're using something like "),O={href:"http://pm2.keymetrics.io/",target:"_blank",rel:"noopener noreferrer"},P=c("PM2"),R=c(" or "),U={href:"https://github.com/foreverjs/forever",target:"_blank",rel:"noopener noreferrer"},$=c("Forever"),H=c(", this is an easy way to restart a specific shard. Remember, "),z=c(" sends a message to "),B=e("strong",null,"all",-1),D=c(" shards, so you have to check if it's on the shard you want."),G=i('<h2 id="shardingmanager-shardargs-and-shardingmanager-execargv" tabindex="-1"><a class="header-anchor" href="#shardingmanager-shardargs-and-shardingmanager-execargv" aria-hidden="true">#</a> <code>ShardingManager#shardArgs</code> and <code>ShardingManager#execArgv</code></h2><p>Consider the following example of creating a new <code>ShardingManager</code> instance:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShardingManager</span><span class="token punctuation">(</span><span class="token string">&#39;./bot.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\texecArgv<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;--trace-warnings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\tshardArgs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;--ansi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--color&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\ttoken<span class="token operator">:</span> <span class="token string">&#39;your-token-goes-here&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The <code>execArgv</code> property is what you would usually pass to Node without sharding, e.g.:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>node --trace-warnings bot.js\n</code></pre></div>',5),J=c("You can find a list of command-line options for Node "),W={href:"https://nodejs.org/api/cli.html",target:"_blank",rel:"noopener noreferrer"},q=c("here"),K=c("."),Q=i('<p>The <code>shardArgs</code> property is what you would usually pass to your bot without sharding, e.g.:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>node bot.js --ansi --color\n</code></pre></div><p>You can access them later as usual via <code>process.argv</code>, which contains an array of executables, your main file, and the command-line arguments used to execute the script.</p><h2 id="eval-arguments" tabindex="-1"><a class="header-anchor" href="#eval-arguments" aria-hidden="true">#</a> Eval arguments</h2><p>There may come the point where you will want to pass arguments from the outer scope into a <code>.broadcastEval()</code> call.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">funcName</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> <span class="token punctuation">{</span> arg <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\nclient<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span>funcName<span class="token punctuation">,</span> <span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token punctuation">{</span> arg<span class="token operator">:</span> <span class="token string">&#39;arg&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',6),V=c("The "),X=c(" typedef was introduced in discord.js v13 as the second parameter in "),Z=e("code",null,".broadcastEval()",-1),nn=c(". It accepts two properties: "),an=e("code",null,"shard",-1),sn=c(" and "),en=e("code",null,"context",-1),tn=c(". The "),on=e("code",null,"context",-1),pn=c(" property will be sent as the second argument to your function."),cn=e("p",null,[c("In this small snippet, an argument is passed to the "),e("code",null,"funcName"),c(" function through this parameter. The function will recieve the arguments as an object as the second parameter.")],-1),rn=e("div",{class:"custom-container warning"},[e("p",{class:"custom-container-title"},"WARNING"),e("p",null,[c("The "),e("code",null,"context"),c(" option only accepts properties which are JSON-serializable. This means you cannot pass complex data types in the context directly. For example, if you sent a "),e("code",null,"User"),c(" instance, the function would recieve the raw data object.")])],-1);r.render=function(c,i){const r=n("RouterLink"),ln=n("DocsLink"),un=n("OutboundLink");return a(),s(p,null,[l,e("div",u,[d,e("p",null,[h,t(r,{to:"/sharding/"},{default:o((()=>[k])),_:1}),g])]),m,e("p",null,[b,f,v,y,w,x,j,t(ln,{path:"class/Shard?scrollTo=e-message"}),T]),S,A,e("div",_,[E,e("p",null,[I,t(ln,{path:"class/ShardClientUtil?scrollTo=ids"},{default:o((()=>[M])),_:1}),N,Y,C])]),F,e("p",null,[L,e("a",O,[P,t(un)]),R,e("a",U,[$,t(un)]),H,t(ln,{path:"class/ShardClientUtil?scrollTo=broadcastEval",type:"method"}),z,B,D]),G,e("p",null,[J,e("a",W,[q,t(un)]),K]),Q,e("p",null,[V,t(ln,{path:"typedef/BroadcastEvalOptions"}),X,Z,nn,an,sn,en,tn,on,pn]),cn,rn],64)};export{r as default};
