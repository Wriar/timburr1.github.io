import{r as n,o as s,c as a,a as t,b as e,w as p,F as o,d as c,f as l}from"./app.554c1b80.js";const i={},u=t("h1",{id:"event-handling",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#event-handling","aria-hidden":"true"},"#"),c(" Event handling")],-1),r=c("Node.js uses an event-driven architecture, making it possible to execute code when a specific event occurs. The discord.js library takes full advantage of this. You can visit the "),k=c(" documentation to see the full list of events."),d=l('<p>Here&#39;s the base code we&#39;ll be using:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Client<span class="token punctuation">,</span> Intents <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span> intents<span class="token operator">:</span> <span class="token punctuation">[</span>Intents<span class="token punctuation">.</span><span class="token constant">FLAGS</span><span class="token punctuation">.</span><span class="token constant">GUILDS</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Ready! Logged in as </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token punctuation">.</span>user<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> in #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> triggered an interaction.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',2),h=c("Currently, the event listeners are in the "),g=t("code",null,"index.js",-1),m=c(" file. "),b=c(" emits once when the "),v=t("code",null,"Client",-1),f=c(" becomes ready for use, and "),y=c(" emits whenever an interaction is received. Moving the event listener code into individual files is simple, and we'll be taking a similar approach to the "),j=c("command handler"),x=c("."),w=l('<h2 id="individual-event-files" tabindex="-1"><a class="header-anchor" href="#individual-event-files" aria-hidden="true">#</a> Individual event files</h2><p>Your project directory should look something like this:</p><div class="language-text ext-text"><pre class="language-text"><code>discord-bot/\n├── node_modules\n├── config.json\n├── index.js\n├── package-lock.json\n└── package.json\n</code></pre></div><p>Create an <code>events</code> folder in the same directory. You can then take your existing events code in <code>index.js</code> and move them to <code>events/ready.js</code> and <code>events/interactionCreate.js</code> files.</p>',4),_=t("div",{class:"language-javascript ext-js line-numbers-mode"},[t("pre",{class:"language-javascript"},[t("code",null,[c("module"),t("span",{class:"token punctuation"},"."),c("exports "),t("span",{class:"token operator"},"="),c(),t("span",{class:"token punctuation"},"{"),c("\n\tname"),t("span",{class:"token operator"},":"),c(),t("span",{class:"token string"},"'ready'"),t("span",{class:"token punctuation"},","),c("\n\tonce"),t("span",{class:"token operator"},":"),c(),t("span",{class:"token boolean"},"true"),t("span",{class:"token punctuation"},","),c("\n\t"),t("span",{class:"token function"},"execute"),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"client"),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\tconsole"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token template-string"},[t("span",{class:"token template-punctuation string"},"`"),t("span",{class:"token string"},"Ready! Logged in as "),t("span",{class:"token interpolation"},[t("span",{class:"token interpolation-punctuation punctuation"},"${"),c("client"),t("span",{class:"token punctuation"},"."),c("user"),t("span",{class:"token punctuation"},"."),c("tag"),t("span",{class:"token interpolation-punctuation punctuation"},"}")]),t("span",{class:"token template-punctuation string"},"`")]),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),c("\n\t"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),c("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br")])],-1),C=t("div",{class:"language-javascript ext-js line-numbers-mode"},[t("pre",{class:"language-javascript"},[t("code",null,[c("module"),t("span",{class:"token punctuation"},"."),c("exports "),t("span",{class:"token operator"},"="),c(),t("span",{class:"token punctuation"},"{"),c("\n\tname"),t("span",{class:"token operator"},":"),c(),t("span",{class:"token string"},"'interactionCreate'"),t("span",{class:"token punctuation"},","),c("\n\t"),t("span",{class:"token function"},"execute"),t("span",{class:"token punctuation"},"("),t("span",{class:"token parameter"},"interaction"),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\tconsole"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token template-string"},[t("span",{class:"token template-punctuation string"},"`"),t("span",{class:"token interpolation"},[t("span",{class:"token interpolation-punctuation punctuation"},"${"),c("interaction"),t("span",{class:"token punctuation"},"."),c("user"),t("span",{class:"token punctuation"},"."),c("tag"),t("span",{class:"token interpolation-punctuation punctuation"},"}")]),t("span",{class:"token string"}," in #"),t("span",{class:"token interpolation"},[t("span",{class:"token interpolation-punctuation punctuation"},"${"),c("interaction"),t("span",{class:"token punctuation"},"."),c("channel"),t("span",{class:"token punctuation"},"."),c("name"),t("span",{class:"token interpolation-punctuation punctuation"},"}")]),t("span",{class:"token string"}," triggered an interaction."),t("span",{class:"token template-punctuation string"},"`")]),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),c("\n\t"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),c("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},";"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br")])],-1),T=t("p",null,[c("The "),t("code",null,"name"),c(" property states which event this file is for, and the "),t("code",null,"once"),c(" property is a boolean that specifies if the event should run only once. The "),t("code",null,"execute"),c(" function is for your event logic, which will be called by the event handler whenever the event emits.")],-1),S=t("h2",{id:"reading-event-files",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#reading-event-files","aria-hidden":"true"},"#"),c(" Reading event files")],-1),I=c("Next, let's write the code for dynamically retrieving all the event files in the "),L=t("code",null,"events",-1),R=c(" folder. We'll be taking a similar approach to our "),$=c("command handler"),F=c("."),G=l('<p><code>fs.readdirSync().filter()</code> returns an array of all the file names in the given directory and filters for only <code>.js</code> files, i.e. <code>[&#39;ready.js&#39;, &#39;interactionCreate.js&#39;]</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span> intents<span class="token operator">:</span> <span class="token punctuation">[</span>Intents<span class="token punctuation">.</span><span class="token constant">FLAGS</span><span class="token punctuation">.</span><span class="token constant">GUILDS</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> eventFiles <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> eventFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./events/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tclient<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> event<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> event<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',2),U=c("The "),W=c(" class in discord.js extends the "),q={href:"https://nodejs.org/api/events.html#events_class_eventemitter",target:"_blank",rel:"noopener noreferrer"},A=t("code",null,"EventEmitter",-1),D=c(" class. Therefore, the "),E=t("code",null,"client",-1),Y=c(" object exposes the "),z={href:"https://nodejs.org/api/events.html#events_emitter_on_eventname_listener",target:"_blank",rel:"noopener noreferrer"},J=t("code",null,".on()",-1),N=c(" and "),O={href:"https://nodejs.org/api/events.html#events_emitter_once_eventname_listener",target:"_blank",rel:"noopener noreferrer"},H=t("code",null,".once()",-1),M=c(" methods that you can use to register event listeners. These methods take two arguments: the event name and a callback function."),P=c("The callback function passed takes argument(s) returned by its respective event, collects them in an "),B=t("code",null,"args",-1),K=c(" array using the "),Q=t("code",null,"...",-1),V=c(),X={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",target:"_blank",rel:"noopener noreferrer"},Z=c("rest parameter syntax"),nn=c(", then calls "),sn=t("code",null,"event.execute()",-1),an=c(" while passing in the "),tn=t("code",null,"args",-1),en=c(" array using the "),pn=t("code",null,"...",-1),on=c(),cn={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",target:"_blank",rel:"noopener noreferrer"},ln=c("spread syntax"),un=c(". They are used here because different events in discord.js have different numbers of arguments. The rest parameter collects these variable number of arguments into a single array, and the spread syntax then takes these elements and passes them to the "),rn=t("code",null,"execute",-1),kn=c(" function."),dn=l('<p>After this, listening for other events is as easy as creating a new file in the <code>events</code> folder. The event handler will automatically retrieve and register it whenever you restart your bot.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>In most cases, you can access your <code>client</code> instance in other files by obtaining it from one of the other discord.js structures, e.g. <code>interaction.client</code> in the <code>interactionCreate</code> event.</p></div><h2 id="resulting-code" tabindex="-1"><a class="header-anchor" href="#resulting-code" aria-hidden="true">#</a> Resulting code</h2>',3);i.render=function(c,l){const i=n("DocsLink"),hn=n("RouterLink"),gn=n("CodeGroupItem"),mn=n("CodeGroup"),bn=n("OutboundLink"),vn=n("ResultingCode");return s(),a(o,null,[u,t("p",null,[r,e(i,{path:"class/Client"}),k]),d,t("p",null,[h,g,m,e(i,{path:"class/Client?scrollTo=e-ready"}),b,v,f,e(i,{path:"class/Client?scrollTo=e-interactionCreate"}),y,e(hn,{to:"/creating-your-bot/command-handling.html"},{default:p((()=>[j])),_:1}),x]),w,e(mn,null,{default:p((()=>[e(gn,{title:"events/ready.js"},{default:p((()=>[_])),_:1}),e(gn,{title:"events/interactionCreate.js"},{default:p((()=>[C])),_:1})])),_:1}),T,S,t("p",null,[I,L,R,e(hn,{to:"/creating-your-bot/command-handling.html"},{default:p((()=>[$])),_:1}),F]),G,t("p",null,[U,e(i,{path:"class/Client"}),W,t("a",q,[A,e(bn)]),D,E,Y,t("a",z,[J,e(bn)]),N,t("a",O,[H,e(bn)]),M]),t("p",null,[P,B,K,Q,V,t("a",X,[Z,e(bn)]),nn,sn,an,tn,en,pn,on,t("a",cn,[ln,e(bn)]),un,rn,kn]),dn,e(vn)],64)};export{i as default};
