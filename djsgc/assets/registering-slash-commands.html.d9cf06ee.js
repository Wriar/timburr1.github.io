import{r as n,o as s,c as a,a as t,b as p,w as e,F as o,d as c,f as i}from"./app.554c1b80.js";const l={},u=t("h1",{id:"registering-slash-commands",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#registering-slash-commands","aria-hidden":"true"},"#"),c(" Registering slash commands")],-1),r=t("p",null,"Discord provides developers with the option to create client-integrated slash commands. In this section, we'll cover how to register these commands using discord.js!",-1),d={class:"custom-container tip"},k=t("p",{class:"custom-container-title"},"TIP",-1),m=c("This page assumes you use the same file structure as our "),h=c("command handling"),b=c(" section. The scripts provided are made to function with that setup."),g=c("If you already have slash commands set up for your application and want to learn how to respond to them, refer to "),f=c("the following page"),v=c("."),y=t("h2",{id:"guild-commands",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#guild-commands","aria-hidden":"true"},"#"),c(" Guild commands")],-1),w=t("p",null,[c("Guild application commands are only available in the guild they were created in, if your application has the "),t("code",null,"applications.commands"),c(" scope authorized.")],-1),j=c("In this section, we'll be using a script that is usable in conjunction with the slash command handler from the "),S=c("command handling"),N=c(" section."),C=c("First off, install the "),I={href:"https://github.com/discordjs/discord.js-modules/blob/main/packages/rest/",target:"_blank",rel:"noopener noreferrer"},R=t("code",null,"@discordjs/rest",-1),T=c(" and "),_={href:"https://github.com/discordjs/discord-api-types/",target:"_blank",rel:"noopener noreferrer"},q=t("code",null,"discord-api-types",-1),O=c(" by running the following command in your terminal:"),x=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" @discordjs/rest discord-api-types\n")])])],-1),G=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" @discordjs/rest discord-api-types\n")])])],-1),D=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" @discordjs/rest discord-api-types\n")])])],-1),A=i('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">REST</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/rest&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Routes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord-api-types/v9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commands <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> commandFiles <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./commands&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Place your client and guild ids here</span>\n<span class="token keyword">const</span> clientId <span class="token operator">=</span> <span class="token string">&#39;123456789012345678&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> guildId <span class="token operator">=</span> <span class="token string">&#39;876543210987654321&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> commandFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./commands/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tcommands<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> rest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">REST</span><span class="token punctuation">(</span><span class="token punctuation">{</span> version<span class="token operator">:</span> <span class="token string">&#39;9&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Started refreshing application (/) commands.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">await</span> rest<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>\n\t\t\tRoutes<span class="token punctuation">.</span><span class="token function">applicationGuildCommands</span><span class="token punctuation">(</span>clientId<span class="token punctuation">,</span> guildId<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">{</span> body<span class="token operator">:</span> commands <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Successfully reloaded application (/) commands.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>Running this script will register all your commands to the guild of which the id was passed in above.</p><h2 id="global-commands" tabindex="-1"><a class="header-anchor" href="#global-commands" aria-hidden="true">#</a> Global commands</h2><p>Global application commands will be available in all the guilds your application has the <code>applications.commands</code> scope authorized, as well as in DMs.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Global commands are cached for one hour. New global commands will fan out slowly across all guilds and will only be guaranteed to be updated after an hour. Guild commands update instantly. As such, we recommend you use guild-based commands during development and publish them to global commands when they&#39;re ready for public use.</p></div><p>To deploy global commands, you can use the same script from the <a href="#guild-commands">guild commands</a> section and adjust the route in the script to <code>.applicationCommands(clientId)</code>.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> rest<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>\n\tRoutes<span class="token punctuation">.</span><span class="token function">applicationCommands</span><span class="token punctuation">(</span>clientId<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span> body<span class="token operator">:</span> commands <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h2><p>Application commands can have <code>options</code>. Think of these options as arguments to a function. You can specify them as shown below:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SlashCommandBuilder <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;echo&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Replies with your input!&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addStringOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span>\n\t\toption<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;The input to echo back&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setRequired</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Notice how <code>.setRequired(true)</code> is specified within the options builder. Setting this will prevent the user from sending the command without specifying a value for this option!</p><h2 id="option-types" tabindex="-1"><a class="header-anchor" href="#option-types" aria-hidden="true">#</a> Option types</h2><p>As shown in the options example above, you can specify the <code>type</code> of an <code>ApplicationCommandOption</code>. Listed below are all the possible values you can pass as <code>ApplicationCommandOptionType</code>:</p>',13),B={class:"custom-container tip"},E=t("p",{class:"custom-container-title"},"TIP",-1),M=c("The "),U=c("slash command builder"),L=c(" has a method for each of these types respectively. Refer to the Discord API documentation for detailed explanations on the "),P={href:"https://discord.com/developers/docs/interactions/application-commands#subcommands-and-subcommand-groups",target:"_blank",rel:"noopener noreferrer"},F=t("code",null,"SUB_COMMAND",-1),z=c(" and "),W=t("code",null,"SUB_COMMAND_GROUP",-1),H=c(" option types"),J=c("."),Y=i('<ul><li><code>SUB_COMMAND</code> sets the option to be a subcommand</li><li><code>SUB_COMMAND_GROUP</code> sets the option to be a subcommand group</li><li><code>STRING</code> sets the option to require a string value</li><li><code>INTEGER</code> sets the option to require an integer value</li><li><code>NUMBER</code> sets the option to require a decimal (also known as a floating point) value</li><li><code>BOOLEAN</code> sets the option to require a boolean value</li><li><code>USER</code> sets the option to require a user or snowflake as value</li><li><code>CHANNEL</code> sets the option to require a channel or snowflake as value</li><li><code>ROLE</code> sets the option to require a role or snowflake as value</li><li><code>MENTIONABLE</code> sets the option to require a user, role or snowflake as value</li></ul><h2 id="choices" tabindex="-1"><a class="header-anchor" href="#choices" aria-hidden="true">#</a> Choices</h2><p>The <code>STRING</code> and <code>INTEGER</code> option types both can have <code>choices</code>. <code>choices</code> are a set of predetermined values users can pick from when selecting the option that contains them.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>If you specify <code>choices</code> for an option, they&#39;ll be the <strong>only</strong> valid values users can pick!</p></div><p>Specify them by using the <code>addChoice()</code> method from the slash command builder:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SlashCommandBuilder <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;gif&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Sends a random gif!&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addStringOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span>\n\t\toption<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;category&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;The gif category&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setRequired</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">addChoice</span><span class="token punctuation">(</span><span class="token string">&#39;Funny&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gif_funny&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">addChoice</span><span class="token punctuation">(</span><span class="token string">&#39;Meme&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gif_meme&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">addChoice</span><span class="token punctuation">(</span><span class="token string">&#39;Movie&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gif_movie&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="subcommands" tabindex="-1"><a class="header-anchor" href="#subcommands" aria-hidden="true">#</a> Subcommands</h3><p>Subcommands are available with the <code>.addSubcommand()</code> method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SlashCommandBuilder <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Get info about a user or a server!&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addSubcommand</span><span class="token punctuation">(</span><span class="token parameter">subcommand</span> <span class="token operator">=&gt;</span>\n\t\tsubcommand\n\t\t\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Info about a user&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">addUserOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;The user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addSubcommand</span><span class="token punctuation">(</span><span class="token parameter">subcommand</span> <span class="token operator">=&gt;</span>\n\t\tsubcommand\n\t\t\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Info about the server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',9);l.render=function(c,i){const l=n("RouterLink"),$=n("OutboundLink"),K=n("CodeGroupItem"),Q=n("CodeGroup");return s(),a(o,null,[u,r,t("div",d,[k,t("p",null,[m,p(l,{to:"/creating-your-bot/command-handling.html"},{default:e((()=>[h])),_:1}),b]),t("p",null,[g,p(l,{to:"/interactions/replying-to-slash-commands.html"},{default:e((()=>[f])),_:1}),v])]),y,w,t("p",null,[j,p(l,{to:"/creating-your-bot/command-handling.html"},{default:e((()=>[S])),_:1}),N]),t("p",null,[C,t("a",I,[R,p($)]),T,t("a",_,[q,p($)]),O]),p(Q,null,{default:e((()=>[p(K,{title:"npm"},{default:e((()=>[x])),_:1}),p(K,{title:"yarn"},{default:e((()=>[G])),_:1}),p(K,{title:"pnpm"},{default:e((()=>[D])),_:1})])),_:1}),A,t("div",B,[E,t("p",null,[M,p(l,{to:"/popular-topics/builders.html#slash-command-builders"},{default:e((()=>[U])),_:1}),L,t("a",P,[F,z,W,H,p($)]),J])]),Y],64)};export{l as default};
