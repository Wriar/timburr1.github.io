import{r as n,o as s,c as a,a as t,b as e,w as p,F as o,f as c,d as l}from"./app.554c1b80.js";const i={},u=c('<h1 id="es6-syntax-examples" tabindex="-1"><a class="header-anchor" href="#es6-syntax-examples" aria-hidden="true">#</a> ES6 syntax examples</h1><p>If you&#39;ve used JavaScript for only a (relatively) small amount of time or don&#39;t have much experience with it, you might not be aware of what ES6 is and what beneficial features it includes. Since this is a guide primarily for Discord bots, we&#39;ll be using some discord.js code as an example of what you might have versus what you could do to benefit from ES6.</p><p>Here&#39;s the startup code we&#39;ll be using:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Client<span class="token punctuation">,</span> Intents <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span> intents<span class="token operator">:</span> <span class="token punctuation">[</span>Intents<span class="token punctuation">.</span><span class="token constant">FLAGS</span><span class="token punctuation">.</span><span class="token constant">GUILDS</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ready!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> <span class="token punctuation">{</span> commandName <span class="token punctuation">}</span> <span class="token operator">=</span> interaction<span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tinteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;beep&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tinteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Boop.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tinteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Guild name: &#39;</span> <span class="token operator">+</span> interaction<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;\\nTotal members: &#39;</span> <span class="token operator">+</span> interaction<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>memberCount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;user-info&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tinteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Your username: &#39;</span> <span class="token operator">+</span> interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">&#39;\\nYour ID: &#39;</span> <span class="token operator">+</span> interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>If you haven&#39;t noticed, this piece of code is already using a bit of ES6 here! The <code>const</code> keyword and arrow function declaration (<code>() =&gt; ...</code>) is ES6 syntax, and we recommend using it whenever possible.</p><p>As for the code above, there are a few places where things can be done better. Let&#39;s look at them.</p><h2 id="template-literals" tabindex="-1"><a class="header-anchor" href="#template-literals" aria-hidden="true">#</a> Template literals</h2><p>If you check the code above, it&#39;s currently doing things like <code>&#39;Guild name: &#39; + interaction.guild.name</code> and <code>&#39;Your username: &#39; + interaction.user.username</code>, which is perfectly valid. It is a bit hard to read, though, and it&#39;s not too fun to constantly type out. Fortunately, there&#39;s a better alternative.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES5 version, as we currently have it</span>\n<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tinteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Guild name: &#39;</span> <span class="token operator">+</span> interaction<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;\\nTotal members: &#39;</span> <span class="token operator">+</span> interaction<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>memberCount<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;user-info&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tinteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Your username: &#39;</span> <span class="token operator">+</span> interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">&#39;\\nYour ID: &#39;</span> <span class="token operator">+</span> interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES6 version, using template literals</span>\n<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tinteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Guild name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\nTotal members: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>memberCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;user-info&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tinteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your username: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\nYour ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Easier to read and write! The best of both worlds.</p><h3 id="template-literals-vs-string-concatenation" tabindex="-1"><a class="header-anchor" href="#template-literals-vs-string-concatenation" aria-hidden="true">#</a> Template literals vs string concatenation</h3><p>If you&#39;ve used other programming languages, you might be familiar with the term &quot;string interpolation&quot;. Template literals would be JavaScript&#39;s implementation of string interpolation. If you&#39;re familiar with the heredoc syntax, it&#39;s very much like that; it allows for string interpolation, as well as multiline strings.</p>',13),r=l("The example below won't go too much into detail about it, but if you're interested in reading more, you can "),k={href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals",target:"_blank",rel:"noopener noreferrer"},m=l("read about them on MDN"),d=l("."),b=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// variables/function used throughout the examples</span>\n<span class="token keyword">const</span> username <span class="token operator">=</span> <span class="token string">&#39;Sanctuary&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">&#39;pleasedonthackme&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">letsPretendThisDoesSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token string">&#39;Yay for sample data.&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// regular string concatenation</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Your username is: **&#39;</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">&#39;**.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Your password is: **&#39;</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">&#39;**.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 + 1 = &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;And here\\&#39;s a function call: &#39;</span> <span class="token operator">+</span> <span class="token function">letsPretendThisDoesSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n\t<span class="token string">&#39;Putting strings on new lines\\n&#39;</span>\n\t<span class="token operator">+</span> <span class="token string">&#39;can be a bit painful\\n&#39;</span>\n\t<span class="token operator">+</span> <span class="token string">&#39;with string concatenation. :(&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// template literals</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your password is: **</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">**.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your username is: **</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">**.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1 + 1 = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">And here&#39;s a function call: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">letsPretendThisDoesSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n\tPutting strings on new lines\n\tis a breeze\n\twith template literals! :)\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// NOTE: template literals will also render the indentation inside them</span>\n<span class="token comment">// there are ways around that, which we&#39;ll discuss in another section.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>You can see how it makes things easier and more readable. In some cases, it can even make your code shorter! This one is something you&#39;ll want to take advantage of as much as possible.</p><h2 id="arrow-functions" tabindex="-1"><a class="header-anchor" href="#arrow-functions" aria-hidden="true">#</a> Arrow functions</h2><p>Arrow functions are shorthand for regular functions, with the addition that they use a lexical <code>this</code> context inside of their own. If you don&#39;t know what the <code>this</code> keyword is referring to, don&#39;t worry about it; you&#39;ll learn more about it as you advance.</p><p>Here are some examples of ways you can benefit from arrow functions over regular functions:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// regular functions, full ES5</span>\nclient<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ready!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;typingStart&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">typing</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typing<span class="token punctuation">.</span>user<span class="token punctuation">.</span>tag <span class="token operator">+</span> <span class="token string">&#39; started typing in #&#39;</span> <span class="token operator">+</span> typing<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;messageCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>author<span class="token punctuation">.</span>tag <span class="token operator">+</span> <span class="token string">&#39; sent: &#39;</span> <span class="token operator">+</span> message<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">doubleAge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token string">&#39;Your age doubled is: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>age <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// inside a message collector command</span>\n<span class="token keyword">var</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> m<span class="token punctuation">.</span>content <span class="token operator">===</span> <span class="token string">&#39;I agree&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m<span class="token punctuation">.</span>author<span class="token punctuation">.</span>bot<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> collector <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">createMessageCollector</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// arrow functions, full ES6</span>\nclient<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ready!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;typingStart&#39;</span><span class="token punctuation">,</span> <span class="token parameter">typing</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>typing<span class="token punctuation">.</span>user<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> started typing in #</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>typing<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;messageCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">message</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token punctuation">.</span>author<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> sent: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">doubleAge</span> <span class="token operator">=</span> <span class="token parameter">age</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your age doubled is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// inside a message collector command</span>\n<span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token parameter">m</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>content <span class="token operator">===</span> <span class="token string">&#39;I agree&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m<span class="token punctuation">.</span>author<span class="token punctuation">.</span>bot<span class="token punctuation">;</span>\n<span class="token keyword">const</span> collector <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">createMessageCollector</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>There are a few important things you should note here:</p><ul><li>The parentheses around function parameters are optional when you have only one parameter but are required otherwise. If you feel like this will confuse you, it may be a good idea to use parentheses.</li><li>You can cleanly put what you need on a single line without curly braces.</li><li>Omitting curly braces will make arrow functions use <strong>implicit return</strong>, but only if you have a single-line expression. The <code>doubleAge</code> and <code>filter</code> variables are a good example of this.</li><li>Unlike the <code>function someFunc() { ... }</code> declaration, arrow functions cannot be used to create functions with such syntax. You can create a variable and give it an anonymous arrow function as the value, though (as seen with the <code>doubleAge</code> and <code>filter</code> variables).</li></ul><p>We won&#39;t be covering the lexical <code>this</code> scope with arrow functions in here, but you can Google around if you&#39;re still curious. Again, if you aren&#39;t sure what <code>this</code> is or when you need it, reading about lexical <code>this</code> first may only confuse you.</p><h2 id="destructuring" tabindex="-1"><a class="header-anchor" href="#destructuring" aria-hidden="true">#</a> Destructuring</h2><p>Destructuring is an easy way to extract items from an object or array. If you&#39;ve never seen the syntax for it before, it can be a bit confusing, but it&#39;s straightforward to understand once explained!</p><h3 id="object-destructuring" tabindex="-1"><a class="header-anchor" href="#object-destructuring" aria-hidden="true">#</a> Object destructuring</h3><p>Here&#39;s a common example where object destructuring would come in handy:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> prefix <span class="token operator">=</span> config<span class="token punctuation">.</span>prefix<span class="token punctuation">;</span>\n<span class="token keyword">const</span> token <span class="token operator">=</span> config<span class="token punctuation">.</span>token<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This code is a bit verbose and not the most fun to write out each time. Object destructuring simplifies this, making it easier to both read and write. Take a look:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> prefix<span class="token punctuation">,</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Object destructuring takes those properties from the object and stores them in variables. If the property doesn&#39;t exist, it&#39;ll still create a variable but with the value of <code>undefined</code>. So instead of using <code>config.token</code> in your <code>client.login()</code> method, you&#39;d simply use <code>token</code>. And since destructuring creates a variable for each item, you don&#39;t even need that <code>const prefix = config.prefix</code> line. Pretty cool!</p><p>Additionally, you could do this for your commands.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> <span class="token punctuation">{</span> commandName <span class="token punctuation">}</span> <span class="token operator">=</span> interaction<span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// ping command here...</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;beep&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// beep command here...</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// other commands here...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',22),g=l("The code is shorter and looks cleaner, but it shouldn't be necessary if you follow along with the "),h=l("command handler"),f=l(" part of the guide."),y=c('<p>You can also rename variables when destructuring, if necessary. A good example is when you&#39;re extracting a property with a name already being used or conflicts with a reserved keyword. The syntax is as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// `default` is a reserved keyword</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token string">&#39;default&#39;</span><span class="token operator">:</span> defaultValue <span class="token punctuation">}</span> <span class="token operator">=</span> someObject<span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// &#39;Some default value here&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="array-destructuring" tabindex="-1"><a class="header-anchor" href="#array-destructuring" aria-hidden="true">#</a> Array destructuring</h3><p>Array destructuring syntax is very similar to object destructuring, except that you use brackets instead of curly braces. In addition, since you&#39;re using it on an array, you destructure the items in the same order the array is. Without array destructuring, this is how you&#39;d extract items from an array:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// assuming we&#39;re in a `profile` command and have an `args` variable</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> age <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> location <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Like the first example with object destructuring, this is a bit verbose and not fun to write out. Array destructuring eases this pain.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> location<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>A single line of code that makes things much cleaner! In some cases, you may not even need all the array&#39;s items (e.g., when using <code>string.match(regex)</code>). Array destructuring still allows you to operate in the same sense.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> id<span class="token punctuation">]</span> <span class="token operator">=</span> message<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>someRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>In this snippet, we use a comma without providing a name for the item in the array we don&#39;t need. You can also give it a placeholder name if you prefer, of course; it&#39;s entirely preference at that point.</p><h2 id="var-let-and-const" tabindex="-1"><a class="header-anchor" href="#var-let-and-const" aria-hidden="true">#</a> var, let, and const</h2><p>Since there are many, many articles out there that can explain this part more in-depth, we&#39;ll only be giving you a TL;DR and an article link if you choose to read more about it.</p><ol><li>The <code>var</code> keyword is what was (and can still be) used in JavaScript before <code>let</code> and <code>const</code> came to surface. There are many issues with <code>var</code>, though, such as it being function-scoped, hoisting related issues, and allowing redeclaration.</li><li>The <code>let</code> keyword is essentially the new <code>var</code>; it addresses many of the issues <code>var</code> has, but its most significant factor would be that it&#39;s block-scoped and disallows redeclaration (<em>not</em> reassignment).</li><li>The <code>const</code> keyword is for giving variables a constant value that is unable to be reassigned. <code>const</code>, like <code>let</code>, is also block-scoped.</li></ol>',13),v=l("The general rule of thumb recommended by this guide is to use "),w=t("code",null,"const",-1),x=l(" wherever possible, "),j=t("code",null,"let",-1),T=l(" otherwise, and avoid using "),S=t("code",null,"var",-1),I=l(". Here's a "),A={href:"https://madhatted.com/2016/1/25/let-it-be",target:"_blank",rel:"noopener noreferrer"},Y=l("helpful article"),N=l(" if you want to read more about this subject.");i.render=function(c,l){const i=n("OutboundLink"),$=n("RouterLink");return s(),a(o,null,[u,t("p",null,[r,t("a",k,[m,e(i)]),d]),b,t("p",null,[g,e($,{to:"/creating-your-bot/command-handling.html"},{default:p((()=>[h])),_:1}),f]),y,t("p",null,[v,w,x,j,T,S,I,t("a",A,[Y,e(i)]),N])],64)};export{i as default};
