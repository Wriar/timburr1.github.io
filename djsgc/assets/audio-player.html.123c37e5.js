import{r as n,o as a,c as s,a as e,b as t,w as p,F as o,f as c,d as i}from"./app.554c1b80.js";const l={},u=c('<h1 id="audio-player" tabindex="-1"><a class="header-anchor" href="#audio-player" aria-hidden="true">#</a> Audio Player</h1><p>Audio players can be used to play audio across voice connections. A single audio player can play the same audio over multiple voice connections.</p><h2 id="cheat-sheet" tabindex="-1"><a class="header-anchor" href="#cheat-sheet" aria-hidden="true">#</a> Cheat sheet</h2><h3 id="creation" tabindex="-1"><a class="header-anchor" href="#creation" aria-hidden="true">#</a> Creation</h3><p>Creating an audio player is simple:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createAudioPlayer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/voice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token function">createAudioPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>You can also customize the behaviors of an audio player. For example, the default behavior is to pause when there are no active subscribers for an audio player. This behavior can be configured to either pause, stop, or just continue playing through the stream:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createAudioPlayer<span class="token punctuation">,</span> NoSubscriberBehavior <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/voice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> player <span class="token operator">=</span> <span class="token function">createAudioPlayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tbehaviors<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tnoSubscriber<span class="token operator">:</span> NoSubscriberBehavior<span class="token punctuation">.</span>Pause<span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="deletion" tabindex="-1"><a class="header-anchor" href="#deletion" aria-hidden="true">#</a> Deletion</h3><p>If you no longer require an audio player, you can <code>stop()</code> it and then remove references to it so that it gets garbage collected.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>player<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="playing-audio" tabindex="-1"><a class="header-anchor" href="#playing-audio" aria-hidden="true">#</a> Playing audio</h3>',12),r=i("You can create "),d=i("audio resources"),k=i(" and then play them on an audio player."),h=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> resource <span class="token operator">=</span> <span class="token function">createAudioResource</span><span class="token punctuation">(</span><span class="token string">&#39;/home/user/voice/track.mp3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nplayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Play &quot;track.mp3&quot; across two voice connections</span>\nconnection1<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconnection2<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><strong>Audio players can play one audio resource at most.</strong> If you try to play another audio resource while one is already playing on the same player, the existing one is destroyed and replaced with the new one.</p></div><h3 id="pausing-unpausing" tabindex="-1"><a class="header-anchor" href="#pausing-unpausing" aria-hidden="true">#</a> Pausing/unpausing</h3><p>You can call the <code>pause()</code> and <code>unpause()</code> methods. While the audio player is paused, no audio will be played. When it is resumed, it will continue where it left off.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>player<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Unpause after 5 seconds</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> player<span class="token punctuation">.</span><span class="token function">unpause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="life-cycle" tabindex="-1"><a class="header-anchor" href="#life-cycle" aria-hidden="true">#</a> Life cycle</h2>',6),b=i("Voice connections have their own life cycle, with five distinct states. You can follow the methods discussed in the "),m=i("life cycles"),g=i(" section to subscribe to changes to voice connections."),y=c('<ul><li><p><strong>Idle</strong> - the initial state of an audio player. The audio player will be in this state when there is no audio resource for it to play.</p></li><li><p><strong>Buffering</strong> - the state an audio player will be in while it is waiting for an audio resource to become playable. The audio player may transition from this state to either the <code>Playing</code> state (success) or the <code>Idle</code> state (failure).</p></li><li><p><strong>Playing</strong> - the state a voice connection enters when it is actively playing an audio resource. When the audio resource comes to an end, the audio player will transition to the Idle state.</p></li><li><p><strong>AutoPaused</strong> - the state a voice connection will enter when the player has paused itself because there are no active voice connections to play to. This is only possible with the <code>noSubscriber</code> behavior set to <code>Pause</code>. It will automatically transition back to <code>Playing</code> once at least one connection becomes available again.</p></li><li><p><strong>Paused</strong> - the state a voice connection enters when it is paused by the user.</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> AudioPlayerStatus <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/voice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nplayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>AudioPlayerStatus<span class="token punctuation">.</span>Playing<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The audio player has started playing!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="handling-errors" tabindex="-1"><a class="header-anchor" href="#handling-errors" aria-hidden="true">#</a> Handling errors</h2><p>When an audio player is given an audio resource to play, it will propagate errors from the audio resource for you to handle.</p><p>In the error handler, you can choose to either play a new audio resource or stop playback. If you take no action, the audio player will stop itself and revert to the <code>Idle</code> state.</p><p>Additionally, the error object will also contain a <code>resource</code> property that helps you to figure out which audio resource created the error.</p><p>Two different examples of how you may handle errors are shown below.</p><h3 id="taking-action-within-the-error-handler" tabindex="-1"><a class="header-anchor" href="#taking-action-within-the-error-handler" aria-hidden="true">#</a> Taking action within the error handler</h3><p>In this example, the audio player will only move on to playing the next audio resource if an error has occurred. If playback ends gracefully, nothing will happen. This example avoids a transition into the Idle state.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createAudioResource <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/voice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> resource <span class="token operator">=</span> <span class="token function">createAudioResource</span><span class="token punctuation">(</span><span class="token string">&#39;/home/user/voice/music.mp3&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tmetadata<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\ttitle<span class="token operator">:</span> <span class="token string">&#39;A good song!&#39;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nplayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nplayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> with resource </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>error<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tplayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token function">getNextResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="taking-action-within-the-idle-state" tabindex="-1"><a class="header-anchor" href="#taking-action-within-the-idle-state" aria-hidden="true">#</a> Taking action within the <code>Idle</code> state</h3><p>In this example, the error event is used only for logging purposes. The audio player will naturally transition into the <code>Idle</code> state, and then another resource is played. This has the advantage of working with streams that come to an end gracefully, and those that are interrupted by errors.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> createAudioResource <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/voice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> resource <span class="token operator">=</span> <span class="token function">createAudioResource</span><span class="token punctuation">(</span><span class="token string">&#39;/home/user/voice/music.mp3&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tmetadata<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\ttitle<span class="token operator">:</span> <span class="token string">&#39;A good song!&#39;</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nplayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nplayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nplayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>AudioPlayerStatus<span class="token punctuation">.</span>Idle<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tplayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token function">getNextResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',13);l.render=function(c,i){const l=n("RouterLink");return a(),s(o,null,[u,e("p",null,[r,t(l,{to:"/voice/audio-resources.html"},{default:p((()=>[d])),_:1}),k]),h,e("p",null,[b,t(l,{to:"/voice/life-cycles.html"},{default:p((()=>[m])),_:1}),g]),y],64)};export{l as default};
