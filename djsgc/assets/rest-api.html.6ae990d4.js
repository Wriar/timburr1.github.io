import{r as n,o as s,c as a,a as t,b as e,w as p,F as o,d as c,f as l}from"./app.554c1b80.js";const i={},r=t("h1",{id:"using-a-rest-api",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#using-a-rest-api","aria-hidden":"true"},"#"),c(" Using a REST API")],-1),u=t("p",null,"REST APIs are extremely popular on the web and allow you to freely grab a site's data if it has an available API over an HTTP connection.",-1),k=t("p",null,"If you've ever seen a music bot that accepts a YouTube query instead of just a video's URL, then you've seen a REST API in action. discord.js uses the Discord API, so you've probably used an API yourself.",-1),d=t("h2",{id:"making-http-requests-with-node",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#making-http-requests-with-node","aria-hidden":"true"},"#"),c(" Making HTTP requests with Node")],-1),m=c("In these examples, we will be using "),h={href:"https://www.npmjs.com/package/node-fetch",target:"_blank",rel:"noopener noreferrer"},b=c("node-fetch"),g=c(", an excellent library for making HTTP requests."),f=t("p",null,"To install node-fetch, run the following command:",-1),w=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" node-fetch@cjs\n")])])],-1),v=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" node-fetch@cjs\n")])])],-1),y=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" node-fetch@cjs\n")])])],-1),j={class:"custom-container tip"},I=t("p",{class:"custom-container-title"},"TIP",-1),_=c("The "),x=t("code",null,"cjs",-1),S=c(" tag of "),T=t("code",null,"node-fetch",-1),N=c(" is used here as versions 3+ do not support the "),P={href:"https://nodejs.org/api/modules.html#modules_modules_commonjs_modules",target:"_blank",rel:"noopener noreferrer"},R=c("CommonJS"),A=c(),U=t("code",null,"require()",-1),q=c(" syntax."),C=l('<h2 id="skeleton-code" tabindex="-1"><a class="header-anchor" href="#skeleton-code" aria-hidden="true">#</a> Skeleton code</h2><p>To start off, you&#39;re just going to be using this skeleton code:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Client<span class="token punctuation">,</span> Intents<span class="token punctuation">,</span> MessageEmbed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span> intents<span class="token operator">:</span> <span class="token punctuation">[</span>Intents<span class="token punctuation">.</span><span class="token constant">FLAGS</span><span class="token punctuation">.</span><span class="token constant">GUILDS</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Ready!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> <span class="token punctuation">{</span> commandName <span class="token punctuation">}</span> <span class="token operator">=</span> interaction<span class="token punctuation">;</span>\n\n\t<span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">&#39;your-token-goes-here&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',3),D={class:"custom-container tip"},E=t("p",{class:"custom-container-title"},"TIP",-1),F=c("We're going to take advantage of "),J=c("destructuring"),O=c(" in this tutorial to maintain readability."),L=t("h2",{id:"using-node-fetch",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#using-node-fetch","aria-hidden":"true"},"#"),c(" Using node-fetch")],-1),W=c("node-fetch is a lightweight, Promise-based module that brings the "),H={href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer"},G=c("Fetch API"),$=c(", which is available in browsers, to node. If you aren't already familiar with Promises, you should read up on them "),M=c("here"),z=c("."),Y=c("In this tutorial, we'll be making a bot with two API-based commands using the "),V={href:"https://aws.random.cat",target:"_blank",rel:"noopener noreferrer"},Q=c("random.cat"),B=c(" and "),K={href:"https://www.urbandictionary.com",target:"_blank",rel:"noopener noreferrer"},X=c("Urban Dictionary"),Z=c(" APIs."),nn=l('<p>To require node-fetch, you&#39;d do:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;node-fetch&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="random-cat" tabindex="-1"><a class="header-anchor" href="#random-cat" aria-hidden="true">#</a> Random Cat</h3>',3),sn=c("Random cat's API is available at "),an={href:"https://aws.random.cat/meow",target:"_blank",rel:"noopener noreferrer"},tn=c("https://aws.random.cat/meow"),en=c(" and returns a "),pn={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",target:"_blank",rel:"noopener noreferrer"},on=c("JSON"),cn=c(" response. To actually fetch data from the API, you're going to do the following:"),ln=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://aws.random.cat/meow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>It may seem like this does nothing, but what it&#39;s doing is launching a request to the random.cat server. The server is returning some JSON that contains a <code>file</code> property, which is a string containing a link to a random cat. node-fetch returns a response object, which we can change into JSON with <code>response.json()</code>. Next, let&#39;s implement this into a command. The code should look similar to this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">deferReply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> <span class="token punctuation">{</span> file <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://aws.random.cat/meow&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tinteraction<span class="token punctuation">.</span><span class="token function">editReply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> files<span class="token operator">:</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>So, here&#39;s what&#39;s happening in this code:</p><ol><li>You&#39;re sending a <code>GET</code> request to random.cat.</li><li>random.cat sees your request and gets a random file from their database.</li><li>random.cat then sends that file&#39;s URL as a JSON object that contains a link to the image.</li><li>node-fetch receives the response and deserializes it with <code>response.json()</code>.</li><li>You then send the object&#39;s <code>file</code> property in Discord.</li></ol><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>The response will only be parsed if the server&#39;s <code>Content-Type</code> header includes <code>application/json</code>. In some cases you may have to apply the <code>.text()</code> method instead of <code>.json()</code> and <code>JSON.parse()</code> it yourself.</p></div><h3 id="urban-dictionary" tabindex="-1"><a class="header-anchor" href="#urban-dictionary" aria-hidden="true">#</a> Urban Dictionary</h3>',7),rn=c("Urban Dictionary's API is available at "),un={href:"https://api.urbandictionary.com/v0/define",target:"_blank",rel:"noopener noreferrer"},kn=c("https://api.urbandictionary.com/v0/define"),dn=c(", accepts a "),mn=t("code",null,"term",-1),hn=c(" parameter, and returns a JSON response."),bn=l('<p>First, you&#39;re going to need to fetch data from the API. To do this, you&#39;d do:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ...</span>\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;urban&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">deferReply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> term <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;term&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span> term <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://api.urbandictionary.com/v0/define?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>query<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',2),gn=c("Here, we use JavaScript's native "),fn={href:"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams",target:"_blank",rel:"noopener noreferrer"},wn=c("URLSearchParams class"),vn=c(" to create a "),yn={href:"https://en.wikipedia.org/wiki/Query_string",target:"_blank",rel:"noopener noreferrer"},jn=c("query string"),In=c(" for the URL so that the Urban Dictionary server can parse it and know what to search."),_n=t("p",null,[c("If you were to do "),t("code",null,"/urban hello world"),c(", then the URL would become https://api.urbandictionary.com/v0/define?term=hello%20world since the string gets encoded.")],-1),xn=c("You can get the respective properties from the returned JSON. If you were to view it in your browser, it usually looks like a bunch of mumbo jumbo. If it doesn't, great! If it does, then you should get a JSON formatter/viewer. If you're using Chrome, "),Sn={href:"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa",target:"_blank",rel:"noopener noreferrer"},Tn=c("JSON Formatter"),Nn=c(' is one of the more popular extensions. If you\'re not using Chrome, search for "JSON formatter/viewer <your browser>" and get one.'),Pn=l('<p>Now, if you look at the JSON, you can see that it&#39;s a <code>list</code> property, which is an array of objects containing various definitions for the term (maximum 10). Something you always want to do when making API-based commands is to handle no results. So, let&#39;s throw a random term in there (e.g. <code>njaksdcas</code>) and then look at the response. The <code>list</code> array should then be empty. Now you are ready to start writing!</p><p>As explained above, you&#39;ll want to check if the API returned any answers for your query, and send back the definition if so:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;urban&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">editReply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">No results found for **</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>term<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">**.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\tinteraction<span class="token punctuation">.</span><span class="token function">editReply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">**</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>term<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">**: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>definition<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Here, you are only getting the first object from the array of objects called <code>list</code> and grabbing its <code>definition</code> property.</p><p>If you&#39;ve followed the tutorial, you should have something like this:</p>',5),Rn=c("urban"),An=c(", No results for "),Un=t("strong",null,"njaksdcas",-1),qn=c("urban"),Cn=t("strong",null,"hello world",-1),Dn=c(": The easiest, and first program any newbie would write. Applies for any language. Also what you would see in the first chapter of most programming books. "),En=c("Now, let's just make this an "),Fn=c("embed"),Jn=c("."),On=l('<p>We are also going to be defining a utility function at the top of the file so that the embed doesn&#39;t error when the field value is over 1024 characters. Here is a bit of code to do that:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">trim</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">...</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The following snippet is how to structure the embed:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>answer<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> embed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageEmbed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">&#39;#EFFF00&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>answer<span class="token punctuation">.</span>word<span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setURL</span><span class="token punctuation">(</span>answer<span class="token punctuation">.</span>permalink<span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addFields</span><span class="token punctuation">(</span>\n\t\t<span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Definition&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token function">trim</span><span class="token punctuation">(</span>answer<span class="token punctuation">.</span>definition<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Example&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token function">trim</span><span class="token punctuation">(</span>answer<span class="token punctuation">.</span>example<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Rating&#39;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>answer<span class="token punctuation">.</span>thumbs_up<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> thumbs up. </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>answer<span class="token punctuation">.</span>thumbs_down<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> thumbs down.</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ninteraction<span class="token punctuation">.</span><span class="token function">editReply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> embeds<span class="token operator">:</span> <span class="token punctuation">[</span>embed<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Now, if you do that same command again, you should get this:</p>',5),Ln=c("urban"),Wn=c(" The easiest, and first program any newbie would write. Applies for any language. Also what you would see in the first chapter of most programming books. "),Hn=c(" programming noob: Hey I just attended my first programming lesson earlier! "),Gn=t("br",null,null,-1),$n=c(" .NET Veteran: Oh? What can you do? "),Mn=t("br",null,null,-1),zn=c(' programming noob: I could make a dialog box pop up which says "Hello World!" !!! '),Yn=t("br",null,null,-1),Vn=c(' .NET Veteran: lmao.. hey guys! look.. check out this "hello world" programmer '),Qn=t("br",null,null,-1),Bn=t("br",null,null,-1),Kn=c(' Console.WriteLine("Hello World") '),Xn=c(" 122 thumbs up. "),Zn=t("br",null,null,-1),ns=c(" 42 thumbs down. "),ss=t("h2",{id:"resulting-code",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#resulting-code","aria-hidden":"true"},"#"),c(" Resulting code")],-1);i.render=function(c,l){const i=n("OutboundLink"),as=n("CodeGroupItem"),ts=n("CodeGroup"),es=n("RouterLink"),ps=n("DiscordInteraction"),os=n("DiscordMention"),cs=n("DiscordMessage"),ls=n("DiscordMessages"),is=n("DiscordEmbedField"),rs=n("DiscordEmbedFields"),us=n("DiscordEmbed"),ks=n("ResultingCode");return s(),a(o,null,[r,u,k,d,t("p",null,[m,t("a",h,[b,e(i)]),g]),f,e(ts,null,{default:p((()=>[e(as,{title:"npm"},{default:p((()=>[w])),_:1}),e(as,{title:"yarn"},{default:p((()=>[v])),_:1}),e(as,{title:"pnpm"},{default:p((()=>[y])),_:1})])),_:1}),t("div",j,[I,t("p",null,[_,x,S,T,N,t("a",P,[R,e(i)]),A,U,q])]),C,t("div",D,[E,t("p",null,[F,e(es,{to:"/additional-info/es6-syntax.html#destructuring"},{default:p((()=>[J])),_:1}),O])]),L,t("p",null,[W,t("a",H,[G,e(i)]),$,e(es,{to:"/additional-info/async-await.html"},{default:p((()=>[M])),_:1}),z]),t("p",null,[Y,t("a",V,[Q,e(i)]),B,t("a",K,[X,e(i)]),Z]),nn,t("p",null,[sn,t("a",an,[tn,e(i)]),en,t("a",pn,[on,e(i)]),cn]),ln,t("p",null,[rn,t("a",un,[kn,e(i)]),dn,mn,hn]),bn,t("p",null,[gn,t("a",fn,[wn,e(i)]),vn,t("a",yn,[jn,e(i)]),In]),_n,t("p",null,[xn,t("a",Sn,[Tn,e(i)]),Nn]),Pn,e(ls,null,{default:p((()=>[e(cs,{profile:"bot"},{interactions:p((()=>[e(ps,{profile:"user",command:!0},{default:p((()=>[Rn])),_:1})])),default:p((()=>[e(os,{highlight:!0,profile:"user"}),An,Un])),_:1}),e(cs,{profile:"bot"},{interactions:p((()=>[e(ps,{profile:"user",command:!0},{default:p((()=>[qn])),_:1})])),default:p((()=>[Cn,Dn])),_:1})])),_:1}),t("p",null,[En,e(es,{to:"/popular-topics/embeds.html"},{default:p((()=>[Fn])),_:1}),Jn]),On,e(ls,null,{default:p((()=>[e(cs,{profile:"bot"},{interactions:p((()=>[e(ps,{profile:"user",command:!0},{default:p((()=>[Ln])),_:1})])),embeds:p((()=>[e(us,{"border-color":"#EFFF00","embed-title":"hello world",url:"https://www.urbandictionary.com/define.php?term=hello%20world"},{fields:p((()=>[e(rs,null,{default:p((()=>[e(is,{"field-title":"Definition"},{default:p((()=>[Wn])),_:1}),e(is,{"field-title":"Example"},{default:p((()=>[Hn,Gn,$n,Mn,zn,Yn,Vn,Qn,Bn,Kn])),_:1}),e(is,{"field-title":"Rating"},{default:p((()=>[Xn,Zn,ns])),_:1})])),_:1})])),_:1})])),_:1})])),_:1}),ss,e(ks)],64)};export{i as default};
