import{r as n,o as a,c as s,b as t,w as e,a as p,F as o,f as c,d as l}from"./app.554c1b80.js";const i={},u=c('<h1 id="storing-data-with-sequelize" tabindex="-1"><a class="header-anchor" href="#storing-data-with-sequelize" aria-hidden="true">#</a> Storing data with Sequelize</h1><p>Sequelize is an object-relational-mapper, which means you can write a query using objects and have it run on almost any other database system that Sequelize supports.</p><h3 id="why-use-an-orm" tabindex="-1"><a class="header-anchor" href="#why-use-an-orm" aria-hidden="true">#</a> Why use an ORM?</h3><p>The main benefit of using an ORM like Sequelize is that it allows you to write code that virtually looks like native JavaScript. As a side benefit, an ORM will enable you to write code that can run in almost every database system. Although databases generally adhere very closely to SQL, they each have their slight nuances and differences. You can create a database-agnostic query using an ORM that works on multiple database systems.</p><h2 id="a-simple-tag-system" tabindex="-1"><a class="header-anchor" href="#a-simple-tag-system" aria-hidden="true">#</a> A simple tag system</h2><p>For this tutorial, we will create a simple tag system that will allow you to add a tag, output a tag, edit a tag, show tag info, list tags, and delete a tag.<br> To begin, you should install Sequelize into your discord.js project. We will explain SQlite as the first storage engine and show how to use other databases later. Note that you will need Node 7.6 or above to utilize the <code>async/await</code> operators.</p><h3 id="installing-and-using-sequelize" tabindex="-1"><a class="header-anchor" href="#installing-and-using-sequelize" aria-hidden="true">#</a> Installing and using Sequelize</h3><p>Create a new project folder and run the following:</p>',8),r=p("div",{class:"language-bash ext-sh"},[p("pre",{class:"language-bash"},[p("code",null,[p("span",{class:"token function"},"npm"),l(),p("span",{class:"token function"},"install"),l(" discord.js sequelize sqlite3\n")])])],-1),k=p("div",{class:"language-bash ext-sh"},[p("pre",{class:"language-bash"},[p("code",null,[p("span",{class:"token function"},"yarn"),l(),p("span",{class:"token function"},"add"),l(" discord.js sequelize sqlite3\n")])])],-1),d=p("div",{class:"language-bash ext-sh"},[p("pre",{class:"language-bash"},[p("code",null,[p("span",{class:"token function"},"pnpm"),l(),p("span",{class:"token function"},"install"),l(" discord.js sequelize sqlite3\n")])])],-1),m={class:"custom-container danger"},b=p("p",{class:"custom-container-title"},"DANGER",-1),g=l("Make sure you use version 5 or later of Sequelize! Version 4, as used in this guide, will pose a security threat. You can read more about this issue on the "),h={href:"https://github.com/sequelize/sequelize/issues/7310",target:"_blank",rel:"noopener noreferrer"},y=l("Sequelize issue tracker"),f=l("."),w=c('<p>After you have installed discord.js and Sequelize, you can start with the following skeleton code. The comment labels will tell you where to insert code later on.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Sequelize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;sequelize&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Client<span class="token punctuation">,</span> Intents <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span> intents<span class="token operator">:</span> <span class="token punctuation">[</span>Intents<span class="token punctuation">.</span><span class="token constant">FLAGS</span><span class="token punctuation">.</span><span class="token constant">GUILDS</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// [alpha]</span>\n<span class="token comment">// [beta]</span>\n\nclient<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// [gamma]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> <span class="token punctuation">{</span> commandName <span class="token punctuation">}</span> <span class="token operator">=</span> interaction<span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;addtag&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// [delta]</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;tag&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// [epsilon]</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;edittag&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// [zeta]</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;taginfo&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// [theta]</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;showtags&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// [lambda]</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;removetag&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// [mu]</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">&#39;your-token-goes-here&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="alpha-connection-information" tabindex="-1"><a class="header-anchor" href="#alpha-connection-information" aria-hidden="true">#</a> [alpha] Connection information</h3><p>The first step is to define the connection information. It should look something like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sequelize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequelize</span><span class="token punctuation">(</span><span class="token string">&#39;database&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\thost<span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>\n\tdialect<span class="token operator">:</span> <span class="token string">&#39;sqlite&#39;</span><span class="token punctuation">,</span>\n\tlogging<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t<span class="token comment">// SQLite only</span>\n\tstorage<span class="token operator">:</span> <span class="token string">&#39;database.sqlite&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>host</code> tells Sequelize where to look for the database. For most systems, the host will be localhost, as the database usually resides with the application. If you have a remote database, however, then you can set it to that connection address. Otherwise, don&#39;t touch this unless you know what you&#39;re doing.<br><code>dialect</code> refers to the database engine you are going to use. For this tutorial, it will be sqlite.<br><code>logging</code> enables verbose output from Sequelize–useful for when you are trying to debug. You can disable it by setting it to <code>false</code>. <code>storage</code> is a sqlite-only setting because sqlite is the only database that stores all its data to a single file.</p><h3 id="beta-creating-the-model" tabindex="-1"><a class="header-anchor" href="#beta-creating-the-model" aria-hidden="true">#</a> [beta] Creating the model</h3><p>In any relational database, you need to create tables to store your data. This simple tag system will use four fields. The table in the database will look something like this:</p><table><thead><tr><th>name</th><th>description</th><th>username</th><th>usage_count</th></tr></thead><tbody><tr><td>bob</td><td>is the best</td><td>bob</td><td>0</td></tr><tr><td>tableflip</td><td>(╯°□°）╯︵ ┻━┻</td><td>joe</td><td>8</td></tr></tbody></table><p>To do that in Sequelize, you define a model based on this structure, as shown below.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">/*\n * equivalent to: CREATE TABLE tags(\n * name VARCHAR(255) UNIQUE,\n * description TEXT,\n * username VARCHAR(255),\n * usage_count  INT NOT NULL DEFAULT 0\n * );\n */</span>\n<span class="token keyword">const</span> Tags <span class="token operator">=</span> sequelize<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;tags&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\ttype<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>\n\t\tunique<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\tdescription<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>\n\tusername<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>\n\tusage_count<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\ttype<span class="token operator">:</span> Sequelize<span class="token punctuation">.</span><span class="token constant">INTEGER</span><span class="token punctuation">,</span>\n\t\tdefaultValue<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n\t\tallowNull<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>The model mirrors very closely what the database defines. There will be a table with four fields called <code>name</code>, <code>description</code>, <code>username</code>, and <code>usage_count</code>.<br><code>sequelize.define()</code> takes two parameters. <code>&#39;tags&#39;</code> are passed as the name of our table, and an object that represents the table&#39;s schema in key-value pairs. Keys in the object become the model&#39;s attributes, and the values describe the attributes.</p><p><code>type</code> refers to what kind of data this attribute should hold. The most common types are number, string, and date, but other data types are available depending on the database.<br><code>unique: true</code> will ensure that this field will never have duplicated entries. Duplicate tag names are disallowed in this database.<br><code>defaultValue</code> allows you to set a fallback value if there&#39;s no initial value during the insert.<br><code>allowNull</code> is not all that important, but this will guarantee in the database that the attribute is never unset. You could potentially set it to be a blank or empty string, but it has to be <em>something</em>.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>Sequelize.STRING</code> vs. <code>Sequelize.TEXT</code>: In most database systems, the string&#39;s length is a fixed length for performance reasons. Sequelize defaults this to 255. Use STRING if your input has a max length, and use TEXT if it does not. For sqlite, there is no unbounded string type, so it will not matter which one you pick.</p></div><h3 id="gamma-syncing-the-model" tabindex="-1"><a class="header-anchor" href="#gamma-syncing-the-model" aria-hidden="true">#</a> [gamma] Syncing the model</h3><p>Now that your structure is defined, you need to make sure the model exists in the database. To make sure the bot is ready and all the data you might need has arrived, place the following code into the <code>.once(&#39;ready&#39;, ...)</code> event callback.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Tags<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>The table does not get created until you <code>sync</code> it. The schema you defined before was building the model that lets Sequelize know how the data should look. For testing, you can use <code>Tags.sync({ force: true })</code> to recreate the table every time on startup. This way, you can get a blank slate each time.</p><h3 id="delta-adding-a-tag" tabindex="-1"><a class="header-anchor" href="#delta-adding-a-tag" aria-hidden="true">#</a> [delta] Adding a tag</h3><p>After all this preparation, you can now write your first command! Let&#39;s start with the ability to add a tag.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> tagName <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> tagDescription <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;description&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// equivalent to: INSERT INTO tags (name, description, username) values (?, ?, ?);</span>\n\t<span class="token keyword">const</span> tag <span class="token operator">=</span> <span class="token keyword">await</span> Tags<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\tname<span class="token operator">:</span> tagName<span class="token punctuation">,</span>\n\t\tdescription<span class="token operator">:</span> tagDescription<span class="token punctuation">,</span>\n\t\tusername<span class="token operator">:</span> interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Tag </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> added.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;SequelizeUniqueConstraintError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;That tag already exists.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Something went wrong with adding a tag.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><code>Tags.create()</code> uses the models that you created previously. The <code>.create()</code> method inserts some data into the model. You are going to insert a tag name, description, and the author name into the database.<br> The <code>catch (error)</code> section is necessary for the insert because it will offload checking for duplicates to the database to notify you if an attempt to create a tag that already exists occurs. The alternative is to query the database before adding data and checking if a result returns. If there are no errors or no identical tag is found, only then would you add the data. Of the two methods, it is clear that catching the error is less work for you.<br> Although <code>if (error.name === &#39;SequelizeUniqueConstraintError&#39;)</code> was mostly for doing less work, it is always good to handle your errors, especially if you know what types of errors you will receive. This error comes up if your unique constraint is violated, i.e., duplicate values are inserted.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Do not use catch for inserting new data. Only use it for gracefully handling things that go wrong in your code or logging errors.</p></div><h3 id="epsilon-fetching-a-tag" tabindex="-1"><a class="header-anchor" href="#epsilon-fetching-a-tag" aria-hidden="true">#</a> [epsilon] Fetching a tag</h3><p>Next, let&#39;s fetch the inserted tag.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> tagName <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// equivalent to: SELECT * FROM tags WHERE name = &#39;tagName&#39; LIMIT 1;</span>\n<span class="token keyword">const</span> tag <span class="token operator">=</span> <span class="token keyword">await</span> Tags<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> tagName <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// equivalent to: UPDATE tags SET usage_count = usage_count + 1 WHERE name = &#39;tagName&#39;;</span>\n\ttag<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">&#39;usage_count&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;description&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Could not find tag: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tagName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>This is your first query. You are finally doing something with your data; yay!<br><code>.findOne()</code> is how you fetch a single row of data. The <code>where: { name: tagName }</code> makes sure you only get the row with the desired tag. Since the queries are asynchronous, you will need to use <code>await</code> to fetch it. After receiving the data, you can use <code>.get()</code> on that object to grab the data. If no data is received, then you can tell the user that the query returned no data.</p><h3 id="zeta-editing-a-tag" tabindex="-1"><a class="header-anchor" href="#zeta-editing-a-tag" aria-hidden="true">#</a> [zeta] Editing a tag</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> tagName <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> tagDescription <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;description&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// equivalent to: UPDATE tags (description) values (?) WHERE name=&#39;?&#39;;</span>\n<span class="token keyword">const</span> affectedRows <span class="token operator">=</span> <span class="token keyword">await</span> Tags<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> description<span class="token operator">:</span> tagDescription <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> tagName <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>affectedRows <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Tag </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tagName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was edited.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Could not find a tag with name </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tagName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>It is possible to edit a record by using the <code>.update()</code> function. An update returns the number of rows that the <code>where</code> condition changed. Since you can only have tags with unique names, you do not have to worry about how many rows may change. Should you get that the query didn&#39;t alter any rows, you can conclude that the tag did not exist.</p><h3 id="theta-display-info-on-a-specific-tag" tabindex="-1"><a class="header-anchor" href="#theta-display-info-on-a-specific-tag" aria-hidden="true">#</a> [theta] Display info on a specific tag</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> tagName <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// equivalent to: SELECT * FROM tags WHERE name = &#39;tagName&#39; LIMIT 1;</span>\n<span class="token keyword">const</span> tag <span class="token operator">=</span> <span class="token keyword">await</span> Tags<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> tagName <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tagName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was created by </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span>createdAt<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and has been used </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token punctuation">.</span>usage_count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Could not find tag: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tagName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>This section is very similar to the previous command, except you will be showing the tag metadata. <code>tag</code> contains your tag object. Notice two things: firstly, it is possible to access the object&#39;s properties without the <code>.get()</code> function. This is because the object is an instance of a Tag, which you can treat as an object and not just a row of data. Second, you can access a property that was not defined explicitly, <code>createdAt</code>. This is because Sequelize automatically adds that column to all tables. Passing another object into the model with <code>{ createdAt: false }</code> can disable this feature, but in this case, it was useful to have.</p><h3 id="lambda-listing-all-tags" tabindex="-1"><a class="header-anchor" href="#lambda-listing-all-tags" aria-hidden="true">#</a> [lambda] Listing all tags</h3><p>The next command will enable you to fetch a list of all the created tags.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// equivalent to: SELECT name FROM tags;</span>\n<span class="token keyword">const</span> tagList <span class="token operator">=</span> <span class="token keyword">await</span> Tags<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span> attributes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> tagString <span class="token operator">=</span> tagList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">t</span> <span class="token operator">=&gt;</span> t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;No tags set.&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">List of tags: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tagString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Here, you can use the <code>.findAll()</code> method to grab all the tag names. Notice that instead of having <code>where</code>, the optional field, <code>attributes</code>, is set. Setting attributes to name will let you get <em>only</em> the names of tags. If you tried to access other fields, like the tag author, you would get an error. If left blank, it will fetch <em>all</em> of the associated column data. It will not affect the results returned, but from a performance perspective, you should only grab the necessary data. If no results return, <code>tagString</code> will default to &#39;No tags set&#39;.</p><h3 id="mu-deleting-a-tag" tabindex="-1"><a class="header-anchor" href="#mu-deleting-a-tag" aria-hidden="true">#</a> [mu] Deleting a tag</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> tagName <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// equivalent to: DELETE from tags WHERE name = ?;</span>\n<span class="token keyword">const</span> rowCount <span class="token operator">=</span> <span class="token keyword">await</span> Tags<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> where<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> tagName <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rowCount<span class="token punctuation">)</span> <span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;That tag did not exist.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Tag deleted.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>.destroy()</code> runs the delete operation. The operation returns a count of the number of affected rows. If it returns with a value of 0, then nothing was deleted, and that tag did not exist in the database in the first place.</p><h2 id="resulting-code" tabindex="-1"><a class="header-anchor" href="#resulting-code" aria-hidden="true">#</a> Resulting code</h2>',41);i.render=function(c,l){const i=n("CodeGroupItem"),v=n("CodeGroup"),q=n("OutboundLink"),T=n("ResultingCode");return a(),s(o,null,[u,t(v,null,{default:e((()=>[t(i,{title:"npm"},{default:e((()=>[r])),_:1}),t(i,{title:"yarn"},{default:e((()=>[k])),_:1}),t(i,{title:"pnpm"},{default:e((()=>[d])),_:1})])),_:1}),p("div",m,[b,p("p",null,[g,p("a",h,[y,t(q)]),f])]),w,t(T,{path:"sequelize/tags"})],64)};export{i as default};
