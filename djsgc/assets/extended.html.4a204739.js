import{r as n,o as s,c as a,a as t,b as p,w as e,F as o,d as c,f as i}from"./app.554c1b80.js";const l={},u=t("h1",{id:"extended-changes",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#extended-changes","aria-hidden":"true"},"#"),c(" Extended changes")],-1),r={class:"custom-container tip"},k=t("p",{class:"custom-container-title"},"TIP",-1),d=c("This page is a follow-up and bases its code on "),h=c("the previous page"),m=c(", which assumes knowledge of arguments and passing functions."),g=i('<h2 id="sending-messages-across-shards" tabindex="-1"><a class="header-anchor" href="#sending-messages-across-shards" aria-hidden="true">#</a> Sending messages across shards</h2><p>Let&#39;s start with the basic usage of shards. At some point in bot development, you might have wanted to send a message to another channel, which may or may not necessarily be on the same guild, which means it may or may not be on the same shard. To achieve this, you will need to go back to your friend <code>.broadcastEval()</code> and try every shard for the desired channel. Suppose you have the following code in your <code>interactionCreate</code> event:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;send&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> id <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;destination&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> channel <span class="token operator">=</span> client<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>channel<span class="token punctuation">)</span> <span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;I could not find such a channel.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\tchannel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I have sent a message to channel: \\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\`!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>This will never work for a channel that lies on another shard. So, let&#39;s remedy this.</p>',4),b={class:"custom-container tip"},v=t("p",{class:"custom-container-title"},"TIP",-1),f=c("In discord.js v13, "),y=t("code",null,"Client#shard",-1),w=c(" can hold multiple ids. If you use the default sharding manager, the "),j=t("code",null,".ids",-1),I=c(" array will only have one entry."),x=i('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;send&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> id <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;destination&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> client<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> <span class="token punctuation">{</span> channelId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> channel <span class="token operator">=</span> c<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>channelId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">await</span> channel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">This is a message from shard </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token punctuation">.</span>shard<span class="token punctuation">.</span>ids<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token punctuation">{</span> channelId<span class="token operator">:</span> id <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>If all is well, you should notice an output like <code>[false, true, false, false]</code>. If it is not clear why <code>true</code> and <code>false</code> are hanging around, the last expression of the eval statement will be returned. You will want this if you want any feedback from the results. Now that you have observed said results, you can adjust the command to give yourself proper feedback, like so:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> client<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">sentArray</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Search for a non falsy value before providing feedback</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sentArray<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> message<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;I could not find such a channel.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> message<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I have sent a message to channel: \\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\`!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>And that&#39;s it for this section! You have successfully communicated across all of your shards.</p><h2 id="using-functions-continued" tabindex="-1"><a class="header-anchor" href="#using-functions-continued" aria-hidden="true">#</a> Using functions continued</h2><p>If you remember, there was a brief mention of passing functions through <code>.broadcastEval()</code>, but no super clear description of exactly how to go about it. Well, fret not, for this section will cover it! Suppose you have the following code in your <code>interactionCreate</code> event:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">message</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;emoji&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> emojiId <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;emoji&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> emoji <span class="token operator">=</span> client<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>emojiId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> message<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I have found an emoji </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>emoji<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>The aforementioned code will essentially search through <code>client.emojis.cache</code> for the provided id, which will be given provided by the <code>emoji</code> option. However, with sharding, you might notice it doesn&#39;t search through all the client&#39;s emojis. As mentioned in an earlier section of this guide, the different shards partition the client and its cache. Emojis derive from guilds meaning each shard will have the emojis from all guilds for that shard. The solution is to use <code>.broadcastEval()</code> to search all the shards for the desired emoji.</p><p>Let&#39;s start with a basic function, which will try to grab an emoji from the current client and return it.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">findEmoji</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> <span class="token punctuation">{</span> nameOrId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> c<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nameOrId<span class="token punctuation">)</span> <span class="token operator">||</span> c<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> nameOrId<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',10),E=c("Next, you need to call the function in your command properly. If you recall from "),O=c("this section"),C=c(", it is shown there how to pass a function and arguments correctly."),S=i('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;emoji&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> emojiNameOrId <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;emoji&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> client<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span>findEmoji<span class="token punctuation">,</span> <span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token punctuation">{</span> nameOrId<span class="token operator">:</span> emojiNameOrId <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Now, run this code, and you will surely get a result that looks like the following:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>\n\t<span class="token punctuation">{</span> \n\t\tguild<span class="token operator">:</span> <span class="token punctuation">{</span> \n\t\t\tmembers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\t\t<span class="token comment">// ...</span>\n\t\t\tid<span class="token operator">:</span> <span class="token string">&#39;222078108977594368&#39;</span><span class="token punctuation">,</span>\n\t\t\tname<span class="token operator">:</span> <span class="token string">&#39;discord.js Official&#39;</span><span class="token punctuation">,</span>\n\t\t\ticon<span class="token operator">:</span> <span class="token string">&#39;6e4b4d1a0c7187f9fd5d4976c50ac96e&#39;</span><span class="token punctuation">,</span>\n\t\t\t<span class="token comment">// ...</span>\n\t\t\temojis<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t\tid<span class="token operator">:</span> <span class="token string">&#39;383735055509356544&#39;</span><span class="token punctuation">,</span>\n\t\tname<span class="token operator">:</span> <span class="token string">&#39;duckSmug&#39;</span><span class="token punctuation">,</span>\n\t\trequiresColons<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\tmanaged<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t\tanimated<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t\t_roles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>While this result isn&#39;t <em>necessarily</em> bad or incorrect, it&#39;s simply a raw object that got <code>JSON.parse()</code>&#39;d and <code>JSON.stringify()</code>&#39;d over, so all of the circular references are gone. More importantly, The object is no longer a true <code>GuildEmoji</code> object as provided by discord.js. <em>This means none of the convenience methods usually provided to you are available.</em> If this is a problem for you, you will want to handle the item <em>inside</em> the <code>broadcastEval</code>. Conveniently, the <code>findEmoji</code> function will be run, so you should execute your relevant methods there, before the object leaves the context.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">findEmoji</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> <span class="token punctuation">{</span> nameOrId <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> emoji <span class="token operator">=</span> c<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nameOrId<span class="token punctuation">)</span> <span class="token operator">||</span> c<span class="token punctuation">.</span>emojis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> nameOrId<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>emoji<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\t<span class="token comment">// If you wanted to delete the emoji with discord.js, this is where you would do it. Otherwise, don&#39;t include this code.</span>\n\temoji<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> emoji<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>With all that said and done, usually you&#39;ll want to display the result, so here is how you can go about doing that:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">return</span> client<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span>findEmoji<span class="token punctuation">,</span> <span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token punctuation">{</span> nameOrId<span class="token operator">:</span> emojiNameOrId <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">emojiArray</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// Locate a non falsy result, which will be the emoji in question</span>\n\t\t<span class="token keyword">const</span> foundEmoji <span class="token operator">=</span> emojiArray<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">emoji</span> <span class="token operator">=&gt;</span> emoji<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foundEmoji<span class="token punctuation">)</span> <span class="token keyword">return</span> message<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;I could not find such an emoji.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> message<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">I have found the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>foundEmoji<span class="token punctuation">.</span>animated <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>foundEmoji<span class="token punctuation">.</span>identifier<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>foundEmoji<span class="token punctuation">.</span>identifier<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt; emoji!</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>And that&#39;s all! The emoji should have pretty-printed in a message, as you&#39;d expect.</p><h2 id="resulting-code" tabindex="-1"><a class="header-anchor" href="#resulting-code" aria-hidden="true">#</a> Resulting code</h2>',9);l.render=function(c,i){const l=n("RouterLink"),N=n("DocsLink"),T=n("ResultingCode");return s(),a(o,null,[u,t("div",r,[k,t("p",null,[d,p(l,{to:"/sharding/additional-information.html"},{default:e((()=>[h])),_:1}),m])]),g,t("div",b,[v,t("p",null,[f,p(N,{path:"class/ShardClientUtil?scrollTo=ids"},{default:e((()=>[y])),_:1}),w,j,I])]),x,t("p",null,[E,p(l,{to:"/sharding/additional-information.html#eval-arguments"},{default:e((()=>[O])),_:1}),C]),S,p(T)],64)};export{l as default};
