import{r as n,o as s,c as a,a as t,b as e,w as p,F as o,f as c,d as i}from"./app.554c1b80.js";const l={},u=c('<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h1><h2 id="when-to-shard" tabindex="-1"><a class="header-anchor" href="#when-to-shard" aria-hidden="true">#</a> When to shard</h2><p>Before you dive into this section, please note that sharding may not be necessary for you. Sharding is only required at 2,500 guildsâ€”at that point, Discord will not allow your bot to login without sharding. With that in mind, you should consider this when your bot is around 2,000 guilds, which should be enough time to get this working. Contrary to popular belief, sharding itself is very simple. It can be complicated depending on your bot&#39;s needs, however. If your bot is in a total of 2,000 or more servers, then please continue with this guide. Otherwise, it may be a good idea to wait until then.</p><h2 id="how-does-sharding-work" tabindex="-1"><a class="header-anchor" href="#how-does-sharding-work" aria-hidden="true">#</a> How does sharding work?</h2>',4),r=i("As an application grows large, a developer may find it necessary to split their process to run parallel to maximize efficiency. On a much larger scale of things, the developer might notice their process slow down, amongst other problems. "),k={href:"https://discord.com/developers/docs/topics/gateway#sharding",target:"_blank",rel:"noopener noreferrer"},d=i("Check out the official Discord documentation on the topic."),h=c('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>This guide only explains the basics of sharding using the built-in ShardingManager, which can run shards as separate processes or threads on a single machine. If you need to scale beyond that (e.g., running shards on multiple machines/containers), you can still do it with discord.js by passing appropriate options to the Client constructor. Nevertheless, you will be on your own regarding managing shards and sharing information between them.</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Apart from ShardingManager, discord.js also supports a sharding mode known as Internal sharding. Internal sharding creates multiple websocket connections from the same process, and does not require major code changes. To enable it, simply pass <code>shards: &#39;auto&#39;</code> as ClientOptions to the Client constructor. However, internal sharding is not ideal for bigger bots due to high memory usage of the single main process and will not be further discussed in this guide.</p></div><h2 id="sharding-file" tabindex="-1"><a class="header-anchor" href="#sharding-file" aria-hidden="true">#</a> Sharding file</h2><p>First, you&#39;ll need to have a file that you&#39;ll be launching from now on, rather than your original <code>index.js</code> file. It&#39;s highly recommended renaming that to <code>bot.js</code> and naming this new file to <code>index.js</code> instead. Copy &amp; paste the following snippet into your new <code>index.js</code> file.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> ShardingManager <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShardingManager</span><span class="token punctuation">(</span><span class="token string">&#39;./bot.js&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> token<span class="token operator">:</span> <span class="token string">&#39;your-token-goes-here&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmanager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;shardCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">shard</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Launched shard </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>shard<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmanager<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>The above code utilizes the discord.js sharding manager to spawn the recommended amount of shards for your bot. The recommended amount should be approximately 1,000 guilds per shard. Note that you have to attach the event listener to <code>shardCreate</code> before calling <code>.spawn()</code> to prevent a race condition possibly preventing shard 0 from logging the successful launch. Even though you provide the token here, you will still need to send it over to the main bot file in <code>client.login()</code>, so don&#39;t forget to do that.</p>',6),m={class:"custom-container tip"},g=t("p",{class:"custom-container-title"},"TIP",-1),b=i("You can find the methods available for the ShardingManager class "),f=i("here"),v=i(". Though, you may not be making much use of this section, unlike the next feature we will explore, which you may learn about by clicking "),y=i("this link"),w=i("."),j=c('<h2 id="getting-started-1" tabindex="-1"><a class="header-anchor" href="#getting-started-1" aria-hidden="true">#</a> Getting started</h2><p>You will most likely have to change some code to get your newly sharded bot to work. If your bot is very basic, then you&#39;re in luck! We assume you probably have some form of a <code>stats</code> command, by which you can quickly view your bot&#39;s statistics, such as its server count. We will use it as an example that needs to adapt to running with shards.</p><p>In this code, you likely have the snippet <code>client.guilds.cache.size</code>, which counts the number of <em>cached</em> guilds attached to that client. Since sharding will launch multiple processes, each process (each shard) will now have its subset collection of guilds it is responsible for. This means that your original code will not function as you might expect.</p><p>Here is some sample code for a <code>stats</code> command, without sharding taken into consideration:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// bot.js</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Client<span class="token punctuation">,</span> Intents <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span> intents<span class="token operator">:</span> <span class="token punctuation">[</span>Intents<span class="token punctuation">.</span><span class="token constant">FLAGS</span><span class="token punctuation">.</span><span class="token constant">GUILDS</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> <span class="token punctuation">{</span> commandName <span class="token punctuation">}</span> <span class="token operator">=</span> interaction<span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;stats&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>client<span class="token punctuation">.</span>guilds<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">&#39;your-token-goes-here&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Let&#39;s say your bot is in a total of 3,600 guilds. Using the recommended shard count, you might end up at four shards, each containing approximately 900 guilds. If a guild is on a specific shard (shard #2, for example) and receives this command, the guild count will be close to 900, which is not the &quot;correct&quot; number of guilds for your bot. Let&#39;s take a look at how to fix that.</p><h2 id="fetchclientvalues" tabindex="-1"><a class="header-anchor" href="#fetchclientvalues" aria-hidden="true">#</a> FetchClientValues</h2>',7),C=i("One of the most common sharding utility methods you'll be using is "),x=i(". This method retrieves a property on the Client object of all shards."),S=c('<p>Take the following snippet of code:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">fetchClientValues</span><span class="token punctuation">(</span><span class="token string">&#39;guilds.cache.size&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),T=i("If you run it, you will notice an output like "),I=t("code",null,"[898, 901, 900, 901]",-1),P=i(". You will be correct in assuming that that's the total number of guilds per shard stored in an array in the Promise. This probably isn't the ideal output for guild count, so let's use "),z={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",target:"_blank",rel:"noopener noreferrer"},G=i("Array.reduce()"),M=i(" to provide a better output."),_={class:"custom-container tip"},N=t("p",{class:"custom-container-title"},"TIP",-1),W=i("It's highly recommended for you to visit "),O={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",target:"_blank",rel:"noopener noreferrer"},R=i("the documentation"),$=i(" to understand how the "),E=t("code",null,"reduce()",-1),L=i(" method works, as you will probably find great use of it in sharding."),q=c('<p>In this case, this method iterates through the array and adds each current value to the total amount:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">fetchClientValues</span><span class="token punctuation">(</span><span class="token string">&#39;guilds.cache.size&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>results<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> guildCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> guildCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> total guilds</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>While it&#39;s a bit unattractive to have more nesting in your commands, it is necessary when not using <code>async</code>/<code>await</code>. Now, the code at the top should look something like the below:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;stats&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> client<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">fetchClientValues</span><span class="token punctuation">(</span><span class="token string">&#39;guilds.cache.size&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>results<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> guildCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> guildCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="broadcasteval" tabindex="-1"><a class="header-anchor" href="#broadcasteval" aria-hidden="true">#</a> BroadcastEval</h2>',5),A=i("Next, check out another handy sharding method known as "),U=i(". This method makes all of the shards evaluate a given method, which recieves a "),V=t("code",null,"client",-1),Y=i(" and a "),D=t("code",null,"context",-1),F=i(" argument. The "),H=t("code",null,"client",-1),J=i(" argument refers to the Client object of the shard evaluating it. You can read about the "),B=t("code",null,"context",-1),K=i(" argument "),Q=i("here"),X=i("."),Z=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span>shard\n\t<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>guilds<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> guild</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> guild<span class="token punctuation">.</span>memberCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This will run the code given to <code>broadcastEval</code> on each shard and return the results to the Promise as an array, once again. You should see something like <code>[9001, 16658, 13337, 15687]</code> logged. The code sent to each shard adds up the <code>memberCount</code> property of every guild that shard is handling and returns it, so each shard&#39;s total guild member count. Of course, if you want to total up the member count of <em>every</em> shard, you can do the same thing again on the Promise results.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span>shard\n\t<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>guilds<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> guild</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> guild<span class="token punctuation">.</span>memberCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Total member count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>results<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> memberCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> memberCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="putting-them-together" tabindex="-1"><a class="header-anchor" href="#putting-them-together" aria-hidden="true">#</a> Putting them together</h2>',4),nn=i("You'd likely want to output both pieces of information in the stats command. You can combine these two results with "),sn={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",target:"_blank",rel:"noopener noreferrer"},an=i("Promise.all()"),tn=i(":"),en=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>\n\tclient<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">fetchClientValues</span><span class="token punctuation">(</span><span class="token string">&#39;guilds.cache.size&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tclient<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>guilds<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> guild</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> guild<span class="token punctuation">.</span>memberCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> totalGuilds <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> guildCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> guildCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> totalMembers <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> memberCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> memberCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>totalGuilds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\nMember count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>totalMembers<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>Promise.all()</code> runs every Promise you pass inside an array in parallel and waits for each to finish before returning their results simultaneously. The result is an array that corresponds with the array of Promises you passâ€“so the first result element will be from the first Promise. With that, your stats command should look something like this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>commandName <span class="token operator">===</span> <span class="token string">&#39;stats&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span>\n\t\t\tclient<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">fetchClientValues</span><span class="token punctuation">(</span><span class="token string">&#39;guilds.cache.size&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\tclient<span class="token punctuation">.</span>shard<span class="token punctuation">.</span><span class="token function">broadcastEval</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>guilds<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> guild</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> guild<span class="token punctuation">.</span>memberCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">results</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">const</span> totalGuilds <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> guildCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> guildCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token keyword">const</span> totalMembers <span class="token operator">=</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> memberCount</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> memberCount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t<span class="token keyword">return</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>totalGuilds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\nMember count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>totalMembers<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><div class="highlight-line">Â </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',3),pn=i("The next section contains additional changes you might want to consider, which you may learn about by clicking "),on=i("this link"),cn=i("."),ln=t("h2",{id:"resulting-code",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#resulting-code","aria-hidden":"true"},"#"),i(" Resulting code")],-1);l.render=function(c,i){const l=n("OutboundLink"),un=n("DocsLink"),rn=n("RouterLink"),kn=n("ResultingCode");return s(),a(o,null,[u,t("p",null,[r,t("a",k,[d,e(l)])]),h,t("div",m,[g,t("p",null,[b,e(un,{path:"class/ShardingManager"},{default:p((()=>[f])),_:1}),v,e(rn,{to:"/sharding/additional-information.html"},{default:p((()=>[y])),_:1}),w])]),j,t("p",null,[C,e(un,{path:"class/ShardClientUtil?scrollTo=fetchClientValues",type:"method"}),x]),S,t("p",null,[T,I,P,t("a",z,[G,e(l)]),M]),t("div",_,[N,t("p",null,[W,t("a",O,[R,e(l)]),$,E,L])]),q,t("p",null,[A,e(un,{path:"class/ShardClientUtil?scrollTo=broadcastEval",type:"method"}),U,V,Y,D,F,H,J,B,K,e(rn,{to:"/sharding/additional-information.html#eval-arguments"},{default:p((()=>[Q])),_:1}),X]),Z,t("p",null,[nn,t("a",sn,[an,e(l)]),tn]),en,t("p",null,[pn,e(rn,{to:"/sharding/additional-information.html"},{default:p((()=>[on])),_:1}),cn]),ln,e(kn,{path:"sharding/getting-started"})],64)};export{l as default};
