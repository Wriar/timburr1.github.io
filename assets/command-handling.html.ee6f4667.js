import{r as n,o as s,c as a,b as t,w as e,a as o,F as p,d as c,f as l}from"./app.554c1b80.js";const i={},u=o("h1",{id:"command-handling",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#command-handling","aria-hidden":"true"},"#"),c(" Command handling")],-1),r=o("p",null,[c("Unless your bot project is a small one, it's not a very good idea to have a single file with a giant "),o("code",null,"if"),c("/"),o("code",null,"else if"),c(" chain for commands. If you want to implement features into your bot and make your development process a lot less painful, you'll want to implement a command handler. Let's get started on that!")],-1),k=o("p",null,"Here are the base files and code we'll be using:",-1),d=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"npm"),c(),o("span",{class:"token function"},"install"),c(" @discordjs/rest discord-api-types\n")])])],-1),m=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"yarn"),c(),o("span",{class:"token function"},"add"),c(" @discordjs/rest discord-api-types\n")])])],-1),b=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"pnpm"),c(),o("span",{class:"token function"},"add"),c(" @discordjs/rest discord-api-types\n")])])],-1),h=o("div",{class:"language-javascript ext-js line-numbers-mode"},[o("pre",{class:"language-javascript"},[o("code",null,[o("span",{class:"token keyword"},"const"),c(),o("span",{class:"token punctuation"},"{"),c(" Client"),o("span",{class:"token punctuation"},","),c(" Intents "),o("span",{class:"token punctuation"},"}"),c(),o("span",{class:"token operator"},"="),c(),o("span",{class:"token function"},"require"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'discord.js'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n"),o("span",{class:"token keyword"},"const"),c(),o("span",{class:"token punctuation"},"{"),c(" token "),o("span",{class:"token punctuation"},"}"),c(),o("span",{class:"token operator"},"="),c(),o("span",{class:"token function"},"require"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'./config.json'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n\n"),o("span",{class:"token keyword"},"const"),c(" client "),o("span",{class:"token operator"},"="),c(),o("span",{class:"token keyword"},"new"),c(),o("span",{class:"token class-name"},"Client"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},"{"),c(" intents"),o("span",{class:"token operator"},":"),c(),o("span",{class:"token punctuation"},"["),c("Intents"),o("span",{class:"token punctuation"},"."),o("span",{class:"token constant"},"FLAGS"),o("span",{class:"token punctuation"},"."),o("span",{class:"token constant"},"GUILDS"),o("span",{class:"token punctuation"},"]"),c(),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n\nclient"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"once"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'ready'"),o("span",{class:"token punctuation"},","),c(),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),c(),o("span",{class:"token operator"},"=>"),c(),o("span",{class:"token punctuation"},"{"),c("\n\tconsole"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"log"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'Ready!'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n\nclient"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"on"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'interactionCreate'"),o("span",{class:"token punctuation"},","),c(),o("span",{class:"token keyword"},"async"),c(),o("span",{class:"token parameter"},"interaction"),c(),o("span",{class:"token operator"},"=>"),c(),o("span",{class:"token punctuation"},"{"),c("\n\t"),o("span",{class:"token keyword"},"if"),c(),o("span",{class:"token punctuation"},"("),o("span",{class:"token operator"},"!"),c("interaction"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"isCommand"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},")"),c(),o("span",{class:"token keyword"},"return"),o("span",{class:"token punctuation"},";"),c("\n\n\t"),o("span",{class:"token keyword"},"const"),c(),o("span",{class:"token punctuation"},"{"),c(" commandName "),o("span",{class:"token punctuation"},"}"),c(),o("span",{class:"token operator"},"="),c(" interaction"),o("span",{class:"token punctuation"},";"),c("\n\n\t"),o("span",{class:"token keyword"},"if"),c(),o("span",{class:"token punctuation"},"("),c("commandName "),o("span",{class:"token operator"},"==="),c(),o("span",{class:"token string"},"'ping'"),o("span",{class:"token punctuation"},")"),c(),o("span",{class:"token punctuation"},"{"),c("\n\t\t"),o("span",{class:"token keyword"},"await"),c(" interaction"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"reply"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'Pong!'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n\t"),o("span",{class:"token punctuation"},"}"),c(),o("span",{class:"token keyword"},"else"),c(),o("span",{class:"token keyword"},"if"),c(),o("span",{class:"token punctuation"},"("),c("commandName "),o("span",{class:"token operator"},"==="),c(),o("span",{class:"token string"},"'beep'"),o("span",{class:"token punctuation"},")"),c(),o("span",{class:"token punctuation"},"{"),c("\n\t\t"),o("span",{class:"token keyword"},"await"),c(" interaction"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"reply"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'Boop!'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n\t"),o("span",{class:"token punctuation"},"}"),c("\n"),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n\nclient"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"login"),o("span",{class:"token punctuation"},"("),c("token"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n")])]),o("div",{class:"line-numbers"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br"),o("span",{class:"line-number"},"7"),o("br"),o("span",{class:"line-number"},"8"),o("br"),o("span",{class:"line-number"},"9"),o("br"),o("span",{class:"line-number"},"10"),o("br"),o("span",{class:"line-number"},"11"),o("br"),o("span",{class:"line-number"},"12"),o("br"),o("span",{class:"line-number"},"13"),o("br"),o("span",{class:"line-number"},"14"),o("br"),o("span",{class:"line-number"},"15"),o("br"),o("span",{class:"line-number"},"16"),o("br"),o("span",{class:"line-number"},"17"),o("br"),o("span",{class:"line-number"},"18"),o("br"),o("span",{class:"line-number"},"19"),o("br"),o("span",{class:"line-number"},"20"),o("br"),o("span",{class:"line-number"},"21"),o("br"),o("span",{class:"line-number"},"22"),o("br")])],-1),g=o("div",{class:"language-javascript ext-js line-numbers-mode"},[o("pre",{class:"language-javascript"},[o("code",null,[o("span",{class:"token keyword"},"const"),c(),o("span",{class:"token punctuation"},"{"),c(),o("span",{class:"token constant"},"REST"),c(),o("span",{class:"token punctuation"},"}"),c(),o("span",{class:"token operator"},"="),c(),o("span",{class:"token function"},"require"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'@discordjs/rest'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n"),o("span",{class:"token keyword"},"const"),c(),o("span",{class:"token punctuation"},"{"),c(" Routes "),o("span",{class:"token punctuation"},"}"),c(),o("span",{class:"token operator"},"="),c(),o("span",{class:"token function"},"require"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'discord-api-types/v9'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n"),o("span",{class:"token keyword"},"const"),c(),o("span",{class:"token punctuation"},"{"),c(" clientId"),o("span",{class:"token punctuation"},","),c(" guildId"),o("span",{class:"token punctuation"},","),c(" token "),o("span",{class:"token punctuation"},"}"),c(),o("span",{class:"token operator"},"="),c(),o("span",{class:"token function"},"require"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'./config.json'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n\n"),o("span",{class:"token keyword"},"const"),c(" commands "),o("span",{class:"token operator"},"="),c(),o("span",{class:"token punctuation"},"["),o("span",{class:"token punctuation"},"]"),o("span",{class:"token punctuation"},";"),c("\n\n"),o("span",{class:"token keyword"},"const"),c(" rest "),o("span",{class:"token operator"},"="),c(),o("span",{class:"token keyword"},"new"),c(),o("span",{class:"token class-name"},"REST"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},"{"),c(" version"),o("span",{class:"token operator"},":"),c(),o("span",{class:"token string"},"'9'"),c(),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"setToken"),o("span",{class:"token punctuation"},"("),c("token"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n\nrest"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"put"),o("span",{class:"token punctuation"},"("),c("Routes"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"applicationGuildCommands"),o("span",{class:"token punctuation"},"("),c("clientId"),o("span",{class:"token punctuation"},","),c(" guildId"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},","),c(),o("span",{class:"token punctuation"},"{"),c(" body"),o("span",{class:"token operator"},":"),c(" commands "),o("span",{class:"token punctuation"},"}"),o("span",{class:"token punctuation"},")"),c("\n\t"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"then"),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},"("),o("span",{class:"token punctuation"},")"),c(),o("span",{class:"token operator"},"=>"),c(" console"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"log"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'Successfully registered application commands.'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},")"),c("\n\t"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"catch"),o("span",{class:"token punctuation"},"("),c("console"),o("span",{class:"token punctuation"},"."),c("error"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},";"),c("\n")])]),o("div",{class:"line-numbers"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br"),o("span",{class:"line-number"},"6"),o("br"),o("span",{class:"line-number"},"7"),o("br"),o("span",{class:"line-number"},"8"),o("br"),o("span",{class:"line-number"},"9"),o("br"),o("span",{class:"line-number"},"10"),o("br"),o("span",{class:"line-number"},"11"),o("br")])],-1),f=o("div",{class:"language-json ext-json line-numbers-mode"},[o("pre",{class:"language-json"},[o("code",null,[o("span",{class:"token punctuation"},"{"),c("\n\t"),o("span",{class:"token property"},'"clientId"'),o("span",{class:"token operator"},":"),c(),o("span",{class:"token string"},'"123456789012345678"'),o("span",{class:"token punctuation"},","),c("\n\t"),o("span",{class:"token property"},'"guildId"'),o("span",{class:"token operator"},":"),c(),o("span",{class:"token string"},'"876543210987654321"'),o("span",{class:"token punctuation"},","),c("\n\t"),o("span",{class:"token property"},'"token"'),o("span",{class:"token operator"},":"),c(),o("span",{class:"token string"},'"your-token-goes-here"'),c("\n"),o("span",{class:"token punctuation"},"}"),c("\n")])]),o("div",{class:"line-numbers"},[o("span",{class:"line-number"},"1"),o("br"),o("span",{class:"line-number"},"2"),o("br"),o("span",{class:"line-number"},"3"),o("br"),o("span",{class:"line-number"},"4"),o("br"),o("span",{class:"line-number"},"5"),o("br")])],-1),y=o("h2",{id:"individual-command-files",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#individual-command-files","aria-hidden":"true"},"#"),c(" Individual command files")],-1),v=o("p",null,"Your project directory should look something like this:",-1),w=o("div",{class:"language-text ext-text"},[o("pre",{class:"language-text"},[o("code",null,"discord-bot/\n├── node_modules\n├── config.json\n├── deploy-commands.js\n├── index.js\n├── package-lock.json\n└── package.json\n")])],-1),j=o("p",null,[c("Create a new folder named "),o("code",null,"commands"),c(", which is where you'll store all of your commands.")],-1),x=c("We'll be using utility methods from the "),_={href:"https://github.com/discordjs/builders",target:"_blank",rel:"noopener noreferrer"},I=o("code",null,"@discordjs/builders",-1),C=c(" package to build the slash command data, so open your terminal and install it."),S=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"npm"),c(),o("span",{class:"token function"},"install"),c(" @discordjs/builders\n")])])],-1),q=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"yarn"),c(),o("span",{class:"token function"},"add"),c(" @discordjs/builders\n")])])],-1),R=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"pnpm"),c(),o("span",{class:"token function"},"add"),c(" @discordjs/builders\n")])])],-1),T=l('<p>Next, create a <code>commands/ping.js</code> file for your ping command:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SlashCommandBuilder <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tdata<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Replies with Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token keyword">async</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token parameter">interaction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>You can go ahead and do the same for the rest of your commands, putting their respective blocks of code inside the <code>execute()</code> function.</p>',3),N={class:"custom-container tip"},F=o("p",{class:"custom-container-title"},"TIP",-1),G={href:"https://nodejs.org/api/modules.html#modules_module_exports",target:"_blank",rel:"noopener noreferrer"},W=o("code",null,"module.exports",-1),L=c(" is how you export data in Node.js so that you can "),D={href:"https://nodejs.org/api/modules.html#modules_require_id",target:"_blank",rel:"noopener noreferrer"},J=o("code",null,"require()",-1),P=c(" it in other files."),U=o("p",null,[c("If you need to access your client instance from inside a command file, you can access it via "),o("code",null,"interaction.client"),c(". If you need to access external files, packages, etc., you should "),o("code",null,"require()"),c(" them at the top of the file.")],-1),A=l('<h2 id="reading-command-files" tabindex="-1"><a class="header-anchor" href="#reading-command-files" aria-hidden="true">#</a> Reading command files</h2><p>In your <code>index.js</code> file, make these additions:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Client<span class="token punctuation">,</span> Collection<span class="token punctuation">,</span> Intents <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span> intents<span class="token operator">:</span> <span class="token punctuation">[</span>Intents<span class="token punctuation">.</span><span class="token constant">FLAGS</span><span class="token punctuation">.</span><span class="token constant">GUILDS</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span>commands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>We recommend attaching a <code>.commands</code> property to your client instance so that you can access your commands in other files. The rest of the examples in this guide will follow this convention.</p>',4),O={class:"custom-container tip"},B=o("p",{class:"custom-container-title"},"TIP",-1),E={href:"https://nodejs.org/api/fs.html",target:"_blank",rel:"noopener noreferrer"},Y=o("code",null,"fs",-1),M=c(" is Node's native file system module. "),$=c(" is a class that extends JavaScript's native "),z={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"},H=o("code",null,"Map",-1),K=c(" class, and includes more extensive, useful functionality."),Q=c("This next step is how to dynamically retrieve your command files. The "),V={href:"https://nodejs.org/api/fs.html#fs_fs_readdirsync_path_options",target:"_blank",rel:"noopener noreferrer"},X=o("code",null,"fs.readdirSync()",-1),Z=c(" method will return an array of all the file names in a directory, e.g. "),nn=o("code",null,"['ping.js', 'beep.js']",-1),sn=c(". To ensure only command files get returned, use "),an=o("code",null,"Array.filter()",-1),tn=c(" to leave out any non-JavaScript files from the array. With that array, loop over it and dynamically set your commands to the "),en=o("code",null,"client.commands",-1),on=c(" Collection."),pn=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span>commands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> commandFiles <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./commands&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> commandFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./commands/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token comment">// Set a new item in the Collection</span>\n\t<span class="token comment">// With the key as the command name and the value as the exported module</span>\n\tclient<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Use the same approach for your <code>deploy-commands.js</code> file, but instead <code>.push()</code> to the <code>commands</code> array with the JSON data for each command.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token constant">REST</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/rest&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Routes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord-api-types/v9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> clientId<span class="token punctuation">,</span> guildId<span class="token punctuation">,</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> commands <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> commandFiles <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span><span class="token string">&#39;./commands&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">file</span> <span class="token operator">=&gt;</span> file<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> file <span class="token keyword">of</span> commandFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./commands/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tcommands<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="dynamically-executing-commands" tabindex="-1"><a class="header-anchor" href="#dynamically-executing-commands" aria-hidden="true">#</a> Dynamically executing commands</h2><p>You can use the <code>client.commands</code> Collection setup to retrieve and execute your commands! Inside the <code>interactionCreate</code> event, delete the <code>if</code>/<code>else if</code> chain of commands and replace it with this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">const</span> command <span class="token operator">=</span> client<span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>command<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>interaction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;There was an error while executing this command!&#39;</span><span class="token punctuation">,</span> ephemeral<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>First, fetch the command in the Collection with that name and assign it to the variable <code>command</code>. If the command doesn&#39;t exist, it will return <code>undefined</code>, so exit early with <code>return</code>. If it does exist, call the command&#39;s <code>.execute()</code> method, and pass in the <code>interaction</code> variable as its argument. In case something goes wrong, log the error and report back to the member to let them know.</p><p>And that&#39;s it! Whenever you want to add a new command, make a new file in your <code>commands</code> directory, name it the same as the slash command, and then do what you did for the other commands. Remember to run <code>node deploy-commands.js</code> to register your commands!</p><h2 id="resulting-code" tabindex="-1"><a class="header-anchor" href="#resulting-code" aria-hidden="true">#</a> Resulting code</h2>',9);i.render=function(c,l){const i=n("CodeGroupItem"),cn=n("CodeGroup"),ln=n("OutboundLink"),un=n("DocsLink"),rn=n("ResultingCode");return s(),a(p,null,[u,r,k,t(cn,null,{default:e((()=>[t(i,{title:"npm"},{default:e((()=>[d])),_:1}),t(i,{title:"yarn"},{default:e((()=>[m])),_:1}),t(i,{title:"pnpm"},{default:e((()=>[b])),_:1})])),_:1}),t(cn,null,{default:e((()=>[t(i,{title:"index.js"},{default:e((()=>[h])),_:1}),t(i,{title:"deploy-commands.js"},{default:e((()=>[g])),_:1}),t(i,{title:"config.json"},{default:e((()=>[f])),_:1})])),_:1}),y,v,w,j,o("p",null,[x,o("a",_,[I,t(ln)]),C]),t(cn,null,{default:e((()=>[t(i,{title:"npm"},{default:e((()=>[S])),_:1}),t(i,{title:"yarn"},{default:e((()=>[q])),_:1}),t(i,{title:"pnpm"},{default:e((()=>[R])),_:1})])),_:1}),T,o("div",N,[F,o("p",null,[o("a",G,[W,t(ln)]),L,o("a",D,[J,t(ln)]),P]),U]),A,o("div",O,[B,o("p",null,[o("a",E,[Y,t(ln)]),M,t(un,{section:"collection",path:"class/Collection"}),$,o("a",z,[H,t(ln)]),K])]),o("p",null,[Q,o("a",V,[X,t(ln)]),Z,nn,sn,an,tn,en,on]),pn,t(rn)],64)};export{i as default};
