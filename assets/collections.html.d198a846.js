import{r as n,o as a,c as s,a as e,b as t,w as o,F as p,d as c,f as l}from"./app.554c1b80.js";const i={},r=e("h1",{id:"collections",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#collections","aria-hidden":"true"},"#"),c(" Collections")],-1),u=e("p",null,[c("discord.js comes with a utility class known as "),e("code",null,"Collection"),c(". It extends JavaScript's native "),e("code",null,"Map"),c(" class, so it has all the "),e("code",null,"Map"),c(" features and more!")],-1),d={class:"custom-container warning"},k=e("p",{class:"custom-container-title"},"WARNING",-1),m=c("If you're not familiar with "),b=e("code",null,"Map",-1),h=c(", read "),f={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"},v=c("MDN's page on it"),y=c(" before continuing. You should be familiar with "),g=e("code",null,"Array",-1),w=c(),A={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",target:"_blank",rel:"noopener noreferrer"},x=c("methods"),j=c(" as well. We will also use some ES6 features, so read up "),C=c("here"),M=c(" if you do not know what they are."),S=l('<p>A <code>Map</code> allows for an association between unique keys and their values. For example, how can you transform every value or filter the entries in a <code>Map</code> easily? This is the point of the <code>Collection</code> class!</p><h2 id="array-like-methods" tabindex="-1"><a class="header-anchor" href="#array-like-methods" aria-hidden="true">#</a> Array-like Methods</h2><p>Many of the methods on <code>Collection</code> correspond to their namesake in <code>Array</code>. One of them is <code>find</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Assume we have an array of users and a collection of the same users.</span>\narray<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">u</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>discriminator <span class="token operator">===</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncollection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">u</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>discriminator <span class="token operator">===</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>The interface of the callback function is very similar between the two. For arrays, callbacks usually pass the parameters <code>(value, index, array)</code>, where <code>value</code> is the value iterated to, <code>index</code> is the current index, and <code>array</code> is the array. For collections, you would have <code>(value, key, collection)</code>. Here, <code>value</code> is the same, but <code>key</code> is the key of the value, and <code>collection</code> is the collection itself instead.</p><p>Methods that follow this philosophy of staying close to the <code>Array</code> interface are as follows:</p><ul><li><code>find</code></li><li><code>filter</code> - Note that this returns a <code>Collection</code> rather than an <code>Array</code>.</li><li><code>map</code> - Yet this returns an <code>Array</code> of values instead of a <code>Collection</code>!</li><li><code>every</code></li><li><code>some</code></li><li><code>reduce</code></li><li><code>concat</code></li><li><code>sort</code></li></ul><h2 id="converting-to-array" tabindex="-1"><a class="header-anchor" href="#converting-to-array" aria-hidden="true">#</a> Converting to Array</h2>',8),F=c("Since "),R=e("code",null,"Collection",-1),_=c(" extends "),N=e("code",null,"Map",-1),W=c(", it is an "),I={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols",target:"_blank",rel:"noopener noreferrer"},J=c("iterable"),T=c(", and can be converted to an "),G=e("code",null,"Array",-1),O=c(" through either "),U=e("code",null,"Array.from()",-1),z=c(" or spread syntax ("),B=e("code",null,"...collection",-1),Y=c(")."),E=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// For values.</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token operator">...</span>collection<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// For keys.</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token operator">...</span>collection<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// For [key, value] pairs.</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token operator">...</span>collection<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Many people convert Collections to Arrays way too much! This can lead to unnecessary and confusing code. Before you use <code>Array.from()</code> or similar, ask yourself if whatever you are trying to do can&#39;t be done with the given <code>Map</code> or <code>Collection</code> methods or with a for-of loop.</p></div><h2 id="extra-utilities" tabindex="-1"><a class="header-anchor" href="#extra-utilities" aria-hidden="true">#</a> Extra Utilities</h2><p>Some methods are not from <code>Array</code> and are instead entirely new to standard JavaScript.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// A random value.</span>\ncollection<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// The first value.</span>\ncollection<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// The first 5 values.</span>\ncollection<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Similar to `first`, but from the end.</span>\ncollection<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncollection<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Removes anything that meets the condition from the collection.</span>\n<span class="token comment">// Sort of like `filter`, but in-place.</span>\ncollection<span class="token punctuation">.</span><span class="token function">sweep</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>username <span class="token operator">===</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>A more complicated method is <code>partition</code>, which splits a single Collection into two new Collections based on the provided function. You can think of it as two <code>filter</code>s, but done at the same time:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// `bots` is a Collection of users where their `bot` property was true.</span>\n<span class="token comment">// `humans` is a Collection where the property was false instead!</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>bots<span class="token punctuation">,</span> humans<span class="token punctuation">]</span> <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">u</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>bot<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Both return true.</span>\nbots<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">b</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>bot<span class="token punctuation">)</span><span class="token punctuation">;</span>\nhumans<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>h<span class="token punctuation">.</span>bot<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',7);i.render=function(c,l){const i=n("OutboundLink"),L=n("RouterLink");return a(),s(p,null,[r,u,e("div",d,[k,e("p",null,[m,b,h,e("a",f,[v,t(i)]),y,g,w,e("a",A,[x,t(i)]),j,t(L,{to:"/additional-info/es6-syntax.html"},{default:o((()=>[C])),_:1}),M])]),S,e("p",null,[F,R,_,N,W,e("a",I,[J,t(i)]),T,G,O,U,z,B,Y]),E],64)};export{i as default};
