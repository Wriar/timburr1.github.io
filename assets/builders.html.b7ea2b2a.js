import{r as n,o as s,c as a,a as t,b as p,w as e,F as o,d as c,f as i}from"./app.554c1b80.js";const l={},u=t("h1",{id:"builders",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#builders","aria-hidden":"true"},"#"),c(" Builders")],-1),r=c("discord.js provides the "),k={href:"https://github.com/discordjs/builders",target:"_blank",rel:"noopener noreferrer"},d=t("code",null,"@discordjs/builders",-1),m=c(" package which contains a variety of utilities you can use when writing your Discord bot. To install the package, run the following command in your terminal:"),b=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" @discordjs/builders\n")])])],-1),h=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" @discordjs/builders\n")])])],-1),g=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" @discordjs/builders\n")])])],-1),f=i('<h2 id="formatters" tabindex="-1"><a class="header-anchor" href="#formatters" aria-hidden="true">#</a> Formatters</h2><p>Formatters are a set of utility functions that format input strings into the given format.</p><h3 id="basic-markdown" tabindex="-1"><a class="header-anchor" href="#basic-markdown" aria-hidden="true">#</a> Basic Markdown</h3><p>The Formatters provide functions to format strings into all the different Markdown styles supported by Discord.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> bold<span class="token punctuation">,</span> italic<span class="token punctuation">,</span> strikethrough<span class="token punctuation">,</span> underscore<span class="token punctuation">,</span> spoiler<span class="token punctuation">,</span> quote<span class="token punctuation">,</span> blockQuote <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> boldString <span class="token operator">=</span> <span class="token function">bold</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> italicString <span class="token operator">=</span> <span class="token function">italic</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> strikethroughString <span class="token operator">=</span> <span class="token function">strikethrough</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> underscoreString <span class="token operator">=</span> <span class="token function">underscore</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> spoilerString <span class="token operator">=</span> <span class="token function">spoiler</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> quoteString <span class="token operator">=</span> <span class="token function">quote</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> blockquoteString <span class="token operator">=</span> <span class="token function">blockQuote</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="links" tabindex="-1"><a class="header-anchor" href="#links" aria-hidden="true">#</a> Links</h3><p>There are also two methods to format hyperlinks. <code>hyperlink()</code> will format the URL into a masked markdown link, and <code>hideLinkEmbed()</code> will wrap the URL in <code>&lt;&gt;</code>, preventing it from embedding.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> hyperlink<span class="token punctuation">,</span> hideLinkEmbed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">&#39;https://discord.js.org/&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> link <span class="token operator">=</span> <span class="token function">hyperlink</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> hiddenEmbed <span class="token operator">=</span> <span class="token function">hideLinkEmbed</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="code-blocks" tabindex="-1"><a class="header-anchor" href="#code-blocks" aria-hidden="true">#</a> Code blocks</h3><p>You can use <code>inlineCode()</code> and <code>codeBlock()</code> to turn a string into an inline code block or a regular code block with or without syntax highlighting.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> inlineCode<span class="token punctuation">,</span> codeBlock <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> jsString <span class="token operator">=</span> <span class="token string">&#39;const value = true;&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> inline <span class="token operator">=</span> <span class="token function">inlineCode</span><span class="token punctuation">(</span>jsString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> codeblock <span class="token operator">=</span> <span class="token function">codeBlock</span><span class="token punctuation">(</span>jsString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> highlighted <span class="token operator">=</span> <span class="token function">codeBlock</span><span class="token punctuation">(</span><span class="token string">&#39;js&#39;</span><span class="token punctuation">,</span> jsString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="timestamps" tabindex="-1"><a class="header-anchor" href="#timestamps" aria-hidden="true">#</a> Timestamps</h3><p>With <code>time()</code>, you can format UNIX timestamps and dates into a Discord time string.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> time <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> timeString <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> relative <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="mentions" tabindex="-1"><a class="header-anchor" href="#mentions" aria-hidden="true">#</a> Mentions</h3><p>The Formatters also contain various methods to format Snowflakes into mentions.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> userMention<span class="token punctuation">,</span> memberNicknameMention<span class="token punctuation">,</span> channelMention<span class="token punctuation">,</span> roleMention <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> id <span class="token operator">=</span> <span class="token string">&#39;123456789012345678&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">userMention</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> nickname <span class="token operator">=</span> <span class="token function">memberNicknameMention</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token function">channelMention</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> role <span class="token operator">=</span> <span class="token function">roleMention</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="slash-command-builders" tabindex="-1"><a class="header-anchor" href="#slash-command-builders" aria-hidden="true">#</a> Slash command builders</h2><p>The slash command builder is a utility class to build slash commands without having to manually construct objects.</p><h3 id="commands" tabindex="-1"><a class="header-anchor" href="#commands" aria-hidden="true">#</a> Commands</h3><p>Here&#39;s a simple slash command using the builder. You can collect your commands data and use it to register slash commands.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SlashCommandBuilder <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Replies with Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Raw data that can be used to register a slash command</span>\n<span class="token keyword">const</span> rawData <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> Options</h3><p>This is a command with a user option.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Get info about a user!&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addUserOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;The user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="subcommands" tabindex="-1"><a class="header-anchor" href="#subcommands" aria-hidden="true">#</a> Subcommands</h3><p>This is a command containing two subcommands.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Get info about a user or a server!&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addSubcommand</span><span class="token punctuation">(</span><span class="token parameter">subcommand</span> <span class="token operator">=&gt;</span>\n\t\tsubcommand\n\t\t\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Info about a user&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">addUserOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;The user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addSubcommand</span><span class="token punctuation">(</span><span class="token parameter">subcommand</span> <span class="token operator">=&gt;</span>\n\t\tsubcommand\n\t\t\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Info about the server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',28);l.render=function(c,i){const l=n("OutboundLink"),v=n("CodeGroupItem"),w=n("CodeGroup");return s(),a(o,null,[u,t("p",null,[r,t("a",k,[d,p(l)]),m]),p(w,null,{default:e((()=>[p(v,{title:"npm"},{default:e((()=>[b])),_:1}),p(v,{title:"yarn"},{default:e((()=>[h])),_:1}),p(v,{title:"pnpm"},{default:e((()=>[g])),_:1})])),_:1}),f],64)};export{l as default};
