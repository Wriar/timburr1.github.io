import{r as n,o as s,c as a,a as t,b as p,F as e,f as o,d as c}from"./app.554c1b80.js";const i={},l=o('<h1 id="life-cycles" tabindex="-1"><a class="header-anchor" href="#life-cycles" aria-hidden="true">#</a> Life cycles</h1><p>Two of the main components that you&#39;ll interact with when using <code>@discordjs/voice</code> are:</p><ul><li><strong>VoiceConnection</strong> – maintains a network connection to a Discord voice server</li><li><strong>AudioPlayer</strong> – plays audio resources across a voice connection</li></ul><p>Both voice connections and audio players are <em>stateful</em>, and you can subscribe to changes in their state as they progress through their respective life cycles.</p><p>It&#39;s important to listen for state change events, as they will likely require you to take some action. For example, a voice connection entering the <code>Disconnected</code> state will probably require you to attempt to reconnect it.</p><p>Their individual life cycles with descriptions of their states are documented on their respective pages.</p><p>Listening to changes in the life cycles of voice connections and audio players can be done in two ways:</p><h2 id="subscribing-to-individual-events" tabindex="-1"><a class="header-anchor" href="#subscribing-to-individual-events" aria-hidden="true">#</a> Subscribing to individual events</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> VoiceConnectionStatus<span class="token punctuation">,</span> AudioPlayerStatus <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/voice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconnection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>VoiceConnectionStatus<span class="token punctuation">.</span>Ready<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">oldState<span class="token punctuation">,</span> newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connection is in the Ready state!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nplayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>AudioPlayerStatus<span class="token punctuation">.</span>Playing<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">oldState<span class="token punctuation">,</span> newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Audio player is in the Playing state!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',9),u={class:"custom-container tip"},r=t("p",{class:"custom-container-title"},"TIP",-1),k=c("One advantage of listening for transitions to individual states is that it becomes a lot easier to write sequential logic. This is made easy using our "),d={href:"https://github.com/discordjs/voice/blob/main/src/util/entersState.ts",target:"_blank",rel:"noopener noreferrer"},b=c("state transition helper"),m=c(". An example is shown below."),g=o('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> AudioPlayerStatus<span class="token punctuation">,</span> entersState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/voice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tplayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">try</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> <span class="token function">entersState</span><span class="token punctuation">(</span>player<span class="token punctuation">,</span> AudioPlayerStatus<span class="token punctuation">.</span>Playing<span class="token punctuation">,</span> <span class="token number">5_000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">// The player has entered the Playing state within 5 seconds</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Playback has started!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// The player has not entered the Playing state and either:</span>\n\t\t<span class="token comment">// 1) The &#39;error&#39; event has been emitted and should be handled</span>\n\t\t<span class="token comment">// 2) 5 seconds have passed</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',1),h=o('<h2 id="subscribing-to-all-state-transitions" tabindex="-1"><a class="header-anchor" href="#subscribing-to-all-state-transitions" aria-hidden="true">#</a> Subscribing to all state transitions</h2><p>If you would prefer to keep a single event listener for all possible state transitions, then you can also listen to the <code>stateChange</code> event:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;stateChange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">oldState<span class="token punctuation">,</span> newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Connection transitioned from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>oldState<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newState<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nplayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;stateChange&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">oldState<span class="token punctuation">,</span> newState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Audio player transitioned from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>oldState<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newState<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',3);i.render=function(o,c){const i=n("OutboundLink");return s(),a(e,null,[l,t("div",u,[r,t("p",null,[k,t("a",d,[b,p(i)]),m]),g]),h],64)};export{i as default};
