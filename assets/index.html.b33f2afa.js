import{r as n,o as s,c as a,a as t,b as e,w as p,F as o,d as c,f as l}from"./app.554c1b80.js";const i={},u=t("h1",{id:"storing-data-with-keyv",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#storing-data-with-keyv","aria-hidden":"true"},"#"),c(" Storing data with Keyv")],-1),r={href:"https://github.com/lukechilds/keyv",target:"_blank",rel:"noopener noreferrer"},k=c("Keyv"),d=c(" is a simple key-value store that works with multiple backends. It's fully scalable for "),m=c("sharding"),g=c(" and supports JSON storage."),b=t("h2",{id:"installation",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#installation","aria-hidden":"true"},"#"),c(" Installation")],-1),h=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" keyv\n")])])],-1),f=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" keyv\n")])])],-1),y=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" keyv\n")])])],-1),v=t("p",null,"Keyv requires an additional package depending on which persistent backend you would prefer to use. If you want to keep everything in memory, you can skip this part. Otherwise, install one of the below.",-1),w=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" @keyv/redis\n"),t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" @keyv/mongo\n"),t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" @keyv/sqlite\n"),t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" @keyv/postgres\n"),t("span",{class:"token function"},"npm"),c(),t("span",{class:"token function"},"install"),c(" @keyv/mysql\n")])])],-1),x=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" @keyv/redis\n"),t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" @keyv/mongo\n"),t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" @keyv/sqlite\n"),t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" @keyv/postgres\n"),t("span",{class:"token function"},"yarn"),c(),t("span",{class:"token function"},"add"),c(" @keyv/mysql\n")])])],-1),_=t("div",{class:"language-bash ext-sh"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" @keyv/redis\n"),t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" @keyv/mongo\n"),t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" @keyv/sqlite\n"),t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" @keyv/postgres\n"),t("span",{class:"token function"},"pnpm"),c(),t("span",{class:"token function"},"add"),c(" @keyv/mysql\n")])])],-1),j=l('<p>Create an instance of Keyv once you&#39;ve installed Keyv and any necessary drivers.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Keyv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;keyv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// One of the following</span>\n<span class="token keyword">const</span> keyv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// for in-memory storage</span>\n<span class="token keyword">const</span> keyv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyv</span><span class="token punctuation">(</span><span class="token string">&#39;redis://user:pass@localhost:6379&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> keyv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyv</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://user:pass@localhost:27017/dbname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> keyv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyv</span><span class="token punctuation">(</span><span class="token string">&#39;sqlite://path/to/database.sqlite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> keyv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyv</span><span class="token punctuation">(</span><span class="token string">&#39;postgresql://user:pass@localhost:5432/dbname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> keyv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyv</span><span class="token punctuation">(</span><span class="token string">&#39;mysql://user:pass@localhost:3306/dbname&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Make sure to handle connection errors.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>keyv<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Keyv connection error:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),K=c("For a more detailed setup, check out the "),q={href:"https://github.com/lukechilds/keyv/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"},P=c("Keyv readme"),C=c("."),S=t("h2",{id:"usage",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),c(" Usage")],-1),I=c("Keyv exposes a familiar "),M={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"},A=c("Map"),L=c("-like API. However, it only has "),D=t("code",null,"set",-1),$=c(", "),G=t("code",null,"get",-1),O=c(", "),R=t("code",null,"delete",-1),W=c(", and "),U=t("code",null,"clear",-1),F=c(" methods. Additionally, instead of immediately returning data, these methods return "),N=c("Promises"),T=c(" that resolve with the data."),E=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// true</span>\n\t<span class="token keyword">await</span> keyv<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// bar</span>\n\t<span class="token keyword">await</span> keyv<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// undefined</span>\n\t<span class="token keyword">await</span> keyv<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// undefined</span>\n\t<span class="token keyword">await</span> keyv<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="application" tabindex="-1"><a class="header-anchor" href="#application" aria-hidden="true">#</a> Application</h2><p>Although Keyv can assist in any scenario where you need key-value data, we will focus on setting up a per-guild prefix configuration using Sqlite.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>This section will still work with any provider supported by Keyv. We recommend PostgreSQL for larger applications.</p></div><h3 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> Setup</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> Keyv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;keyv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> Client<span class="token punctuation">,</span> Intents <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> globalPrefix<span class="token punctuation">,</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">{</span> intents<span class="token operator">:</span> <span class="token punctuation">[</span>Intents<span class="token punctuation">.</span><span class="token constant">FLAGS</span><span class="token punctuation">.</span><span class="token constant">GUILDS</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> prefixes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Keyv</span><span class="token punctuation">(</span><span class="token string">&#39;sqlite://path/to.sqlite&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="command-handler" tabindex="-1"><a class="header-anchor" href="#command-handler" aria-hidden="true">#</a> Command handler</h3>',7),J=c("This guide uses a very basic command handler with some added complexity to allow for multiple prefixes. Look at the "),z=c("command handling"),H=c(" guide for a more robust command handler."),Q=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;messageCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">message</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>author<span class="token punctuation">.</span>bot<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">let</span> args<span class="token punctuation">;</span>\n\t<span class="token comment">// handle messages in a guild</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>guild<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">let</span> prefix<span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>globalPrefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tprefix <span class="token operator">=</span> globalPrefix<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// check the guild-level prefix</span>\n\t\t\t<span class="token keyword">const</span> guildPrefix <span class="token operator">=</span> <span class="token keyword">await</span> prefixes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>guildPrefix<span class="token punctuation">)</span><span class="token punctuation">)</span> prefix <span class="token operator">=</span> guildPrefix<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token comment">// if we found a prefix, setup args; otherwise, this isn&#39;t a command</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefix<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\t\targs <span class="token operator">=</span> message<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>prefix<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// handle DMs</span>\n\t\t<span class="token keyword">const</span> slice <span class="token operator">=</span> message<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>globalPrefix<span class="token punctuation">)</span> <span class="token operator">?</span> globalPrefix<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t\targs <span class="token operator">=</span> message<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// get the first space-delimited argument after the prefix as the command</span>\n\t<span class="token keyword">const</span> command <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="prefix-command" tabindex="-1"><a class="header-anchor" href="#prefix-command" aria-hidden="true">#</a> Prefix command</h3><p>Now that you have a command handler, you can make a command to allow people to use your prefix system.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;messageCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">message</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">===</span> <span class="token string">&#39;prefix&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// if there&#39;s at least one argument, set the prefix</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">await</span> prefixes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>id<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span> message<span class="token punctuation">.</span>channel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Successfully set prefix to \\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token keyword">return</span> message<span class="token punctuation">.</span>channel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Prefix is \\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">await</span> prefixes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">||</span> globalPrefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>You will probably want to set up additional validation, such as required permissions and maximum prefix length.</p><h3 id="usage-1" tabindex="-1"><a class="header-anchor" href="#usage-1" aria-hidden="true">#</a> Usage</h3>',6),V=c(" .prefix "),Y=c(" Prefix is "),B=c("`.`"),X=c(" .prefix $ "),Z=c(" Successfully set prefix to "),nn=c("`$`"),sn=c(" $prefix "),an=c(" Prefix is "),tn=c("`$`"),en=t("h2",{id:"next-steps",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#next-steps","aria-hidden":"true"},"#"),c(" Next steps")],-1),pn=c("Various other applications can use Keyv, such as guild settings; create another instance with a different "),on={href:"https://github.com/lukechilds/keyv#namespaces",target:"_blank",rel:"noopener noreferrer"},cn=c("namespace"),ln=c(" for each setting. Additionally, it can be "),un={href:"https://github.com/lukechilds/keyv#third-party-storage-adapters",target:"_blank",rel:"noopener noreferrer"},rn=c("extended"),kn=c(" to work with whatever storage backend you prefer."),dn=c("Check out the "),mn={href:"https://github.com/lukechilds/keyv",target:"_blank",rel:"noopener noreferrer"},gn=c("Keyv repository"),bn=c(" for more information."),hn=t("h2",{id:"resulting-code",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#resulting-code","aria-hidden":"true"},"#"),c(" Resulting code")],-1);i.render=function(c,l){const i=n("OutboundLink"),fn=n("RouterLink"),yn=n("CodeGroupItem"),vn=n("CodeGroup"),wn=n("DiscordMessage"),xn=n("DiscordMarkdown"),_n=n("DiscordMessages"),jn=n("ResultingCode");return s(),a(o,null,[u,t("p",null,[t("a",r,[k,e(i)]),d,e(fn,{to:"/sharding/"},{default:p((()=>[m])),_:1}),g]),b,e(vn,null,{default:p((()=>[e(yn,{title:"npm"},{default:p((()=>[h])),_:1}),e(yn,{title:"yarn"},{default:p((()=>[f])),_:1}),e(yn,{title:"pnpm"},{default:p((()=>[y])),_:1})])),_:1}),v,e(vn,null,{default:p((()=>[e(yn,{title:"npm"},{default:p((()=>[w])),_:1}),e(yn,{title:"yarn"},{default:p((()=>[x])),_:1}),e(yn,{title:"pnpm"},{default:p((()=>[_])),_:1})])),_:1}),j,t("p",null,[K,t("a",q,[P,e(i)]),C]),S,t("p",null,[I,t("a",M,[A,e(i)]),L,D,$,G,O,R,W,U,F,e(fn,{to:"/additional-info/async-await.html"},{default:p((()=>[N])),_:1}),T]),E,t("p",null,[J,e(fn,{to:"/creating-your-bot/command-handling.html"},{default:p((()=>[z])),_:1}),H]),Q,e(_n,null,{default:p((()=>[e(wn,{profile:"user"},{default:p((()=>[V])),_:1}),e(wn,{profile:"bot"},{default:p((()=>[Y,e(xn,null,{default:p((()=>[B])),_:1})])),_:1}),e(wn,{profile:"user"},{default:p((()=>[X])),_:1}),e(wn,{profile:"bot"},{default:p((()=>[Z,e(xn,null,{default:p((()=>[nn])),_:1})])),_:1}),e(wn,{profile:"user"},{default:p((()=>[sn])),_:1}),e(wn,{profile:"bot"},{default:p((()=>[an,e(xn,null,{default:p((()=>[tn])),_:1})])),_:1})])),_:1}),en,t("p",null,[pn,t("a",on,[cn,e(i)]),ln,t("a",un,[rn,e(i)]),kn]),t("p",null,[dn,t("a",mn,[gn,e(i)]),bn]),hn,e(jn)],64)};export{i as default};
