import{r as n,o as s,c as a,a as t,b as e,w as p,F as o,d as c,f as i}from"./app.554c1b80.js";const l={},u=t("h1",{id:"buttons",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#buttons","aria-hidden":"true"},"#"),c(" Buttons")],-1),r=t("p",null,"With the components API, you can create interactive message components. On this page, we'll cover how to send, receive, and respond to buttons using discord.js!",-1),k={class:"custom-container tip"},d=t("p",{class:"custom-container-title"},"TIP",-1),b=c("This page is a follow-up to the "),m=c("interactions (slash commands) pages"),g=c(". Please carefully read those first so that you can understand the methods used in this section."),h=i('<h2 id="building-and-sending-buttons" tabindex="-1"><a class="header-anchor" href="#building-and-sending-buttons" aria-hidden="true">#</a> Building and sending buttons</h2><p>Buttons are part of the <code>MessageComponent</code> class, which can be sent via messages or interaction responses. A button, as any other message component, must be in an <code>ActionRow</code>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>You can have a maximum of five <code>ActionRow</code>s per message, and five buttons within an <code>ActionRow</code>.</p></div><p>To create a button, use the <code>MessageActionRow()</code> and <code>MessageButton()</code> builder functions and then pass the resulting object to <code>CommandInteraction#reply()</code> as <code>InteractionReplyOptions</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> MessageActionRow<span class="token punctuation">,</span> MessageButton <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageActionRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">addComponents</span><span class="token punctuation">(</span>\n\t\t\t\t<span class="token keyword">new</span> <span class="token class-name">MessageButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token punctuation">.</span><span class="token function">setCustomId</span><span class="token punctuation">(</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token punctuation">.</span><span class="token function">setLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Primary&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">&#39;PRIMARY&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">,</span> components<span class="token operator">:</span> <span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The custom ID is a developer-defined string of up to 100 characters.</p></div><p>Restart your bot and then send the command to a channel your bot has access to. If all goes well, you should see something like this:</p>',7),v=c("ping"),f=c(" Pong! "),y=c("Primary"),w=i('<p>You can also send message components within an ephemeral response or alongside message embeds.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> MessageActionRow<span class="token punctuation">,</span> MessageButton<span class="token punctuation">,</span> MessageEmbed <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageActionRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">addComponents</span><span class="token punctuation">(</span>\n\t\t\t\t<span class="token comment">// ...</span>\n\t\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">const</span> embed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageEmbed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">&#39;#0099ff&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&#39;Some title&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setURL</span><span class="token punctuation">(</span><span class="token string">&#39;https://discord.js.org&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Some description here&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">,</span> ephemeral<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> embeds<span class="token operator">:</span> <span class="token punctuation">[</span>embed<span class="token punctuation">]</span><span class="token punctuation">,</span> components<span class="token operator">:</span> <span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',2),j=c("ping"),I=c(" Pong! "),R=c(" Some description here "),_=c("Primary"),C=i('<h3 id="disabled-buttons" tabindex="-1"><a class="header-anchor" href="#disabled-buttons" aria-hidden="true">#</a> Disabled buttons</h3><p>If you want to prevent a button from being used, but not remove it from the message, you can disable it with the <code>setDisabled()</code> method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setCustomId</span><span class="token punctuation">(</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Primary&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">&#39;PRIMARY&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setDisabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',3),M=c("ping"),P=c(" Pong! "),x=c("Primary"),A=i('<h3 id="emoji-buttons" tabindex="-1"><a class="header-anchor" href="#emoji-buttons" aria-hidden="true">#</a> Emoji buttons</h3><p>If you want to use a guild emoji within a <code>MessageButton</code>, you can use the <code>setEmoji()</code> method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setCustomId</span><span class="token punctuation">(</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setLabel</span><span class="token punctuation">(</span><span class="token string">&#39;Primary&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token string">&#39;PRIMARY&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setEmoji</span><span class="token punctuation">(</span><span class="token string">&#39;123456789012345678&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Now you know all there is to building and sending a <code>MessageButton</code>! Let&#39;s move on to receiving button interactions!</p><h2 id="receiving-buttons" tabindex="-1"><a class="header-anchor" href="#receiving-buttons" aria-hidden="true">#</a> Receiving buttons</h2><p>To receive a <code>ButtonInteraction</code>, attach an event listener to your client and use the <code>Interaction#isButton()</code> type guard to make sure you only receive buttons:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>interaction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="component-collectors" tabindex="-1"><a class="header-anchor" href="#component-collectors" aria-hidden="true">#</a> Component collectors</h2><p>These work quite similarly to message and reaction collectors, except that you will receive instances of the <code>MessageComponentInteraction</code> class as collected items.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can create the collectors on either a <code>message</code> or a <code>channel</code>.</p></div>',10),B=c("For a detailed guide on receiving message components via collectors, please refer to the "),D=c("collectors guide"),S=c("."),T=i('<h2 id="responding-to-buttons" tabindex="-1"><a class="header-anchor" href="#responding-to-buttons" aria-hidden="true">#</a> Responding to buttons</h2><p>The <code>MessageComponentInteraction</code> class provides the same methods as the <code>CommandInteraction</code> class. These methods behave equally:</p><ul><li><code>reply()</code></li><li><code>editReply()</code></li><li><code>deferReply()</code></li><li><code>fetchReply()</code></li><li><code>deleteReply()</code></li><li><code>followUp()</code></li></ul><h3 id="updating-the-button-message" tabindex="-1"><a class="header-anchor" href="#updating-the-button-message" aria-hidden="true">#</a> Updating the button message</h3><p>The <code>MessageComponentInteraction</code> class provides an <code>update()</code> method to update the message the button is attached to. Passing an empty array to the <code>components</code> option will remove any buttons after one has been clicked.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token parameter">i</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">.</span>customId <span class="token operator">===</span> <span class="token string">&#39;primary&#39;</span> <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token string">&#39;122157285790187530&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> collector <span class="token operator">=</span> interaction<span class="token punctuation">.</span>channel<span class="token punctuation">.</span><span class="token function">createMessageComponentCollector</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;collect&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>customId <span class="token operator">===</span> <span class="token string">&#39;primary&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> i<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;A button was clicked!&#39;</span><span class="token punctuation">,</span> components<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token parameter">collected</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>collected<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> items</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="deferring-and-updating-the-button-message" tabindex="-1"><a class="header-anchor" href="#deferring-and-updating-the-button-message" aria-hidden="true">#</a> Deferring and updating the button message</h3><p>In addition to deferring an interaction response, you can defer the button, which will trigger a loading state and then revert to its original state:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> wait <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;collect&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>customId <span class="token operator">===</span> <span class="token string">&#39;primary&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> i<span class="token punctuation">.</span><span class="token function">deferUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> i<span class="token punctuation">.</span><span class="token function">editReply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;A button was clicked!&#39;</span><span class="token punctuation">,</span> components<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token parameter">collected</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>collected<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> items</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="button-styles" tabindex="-1"><a class="header-anchor" href="#button-styles" aria-hidden="true">#</a> Button styles</h2><p>Currently there are five different button styles available:</p><ul><li><code>PRIMARY</code>, a blurple button;</li><li><code>SECONDARY</code>, a grey button;</li><li><code>SUCCESS</code>, a green button;</li><li><code>DANGER</code>, a red button;</li><li><code>LINK</code>, a button that navigates to a URL.</li></ul>',12),N=c("Primary"),L=c("Secondary"),E=c("Success"),Y=c("Danger"),U=c("Link"),q=i('<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Only <code>LINK</code> buttons can have a <code>url</code>. <code>LINK</code> buttons <em>cannot</em> have a <code>custom_id</code> and <em>do not</em> send an interaction event when clicked.</p></div>',1);l.render=function(c,i){const l=n("RouterLink"),O=n("DiscordInteraction"),G=n("DiscordButton"),K=n("DiscordButtons"),W=n("DiscordMessage"),z=n("DiscordMessages"),F=n("DiscordEmbed");return s(),a(o,null,[u,r,t("div",k,[d,t("p",null,[b,e(l,{to:"/interactions/registering-slash-commands.html"},{default:p((()=>[m])),_:1}),g])]),h,e(z,null,{default:p((()=>[e(W,{profile:"bot"},{interactions:p((()=>[e(O,{profile:"user",command:!0},{default:p((()=>[v])),_:1})])),actions:p((()=>[e(K,null,{default:p((()=>[e(G,null,{default:p((()=>[y])),_:1})])),_:1})])),default:p((()=>[f])),_:1})])),_:1}),w,e(z,null,{default:p((()=>[e(W,{profile:"bot"},{interactions:p((()=>[e(O,{profile:"user",command:!0,ephemeral:!0},{default:p((()=>[j])),_:1})])),embeds:p((()=>[e(F,{"border-color":"#0099ff","embed-title":"Some title",url:"https://discord.js.org"},{default:p((()=>[R])),_:1})])),actions:p((()=>[e(K,null,{default:p((()=>[e(G,null,{default:p((()=>[_])),_:1})])),_:1})])),default:p((()=>[I])),_:1})])),_:1}),C,e(z,null,{default:p((()=>[e(W,{profile:"bot"},{interactions:p((()=>[e(O,{profile:"user",command:!0},{default:p((()=>[M])),_:1})])),actions:p((()=>[e(K,null,{default:p((()=>[e(G,{disabled:!0},{default:p((()=>[x])),_:1})])),_:1})])),default:p((()=>[P])),_:1})])),_:1}),A,t("p",null,[B,e(l,{to:"/popular-topics/collectors.html#interaction-collectors"},{default:p((()=>[D])),_:1}),S]),T,e(z,null,{default:p((()=>[e(W,{profile:"bot"},{actions:p((()=>[e(K,null,{default:p((()=>[e(G,null,{default:p((()=>[N])),_:1}),e(G,{type:"secondary"},{default:p((()=>[L])),_:1}),e(G,{type:"success"},{default:p((()=>[E])),_:1}),e(G,{type:"danger"},{default:p((()=>[Y])),_:1}),e(G,{type:"link",url:"https://discord.js.org"},{default:p((()=>[U])),_:1})])),_:1})])),_:1})])),_:1}),q],64)};export{l as default};
