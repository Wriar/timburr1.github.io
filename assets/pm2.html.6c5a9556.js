import{r as a,o as s,c as e,b as n,w as t,a as o,F as r,d as l,f as i}from"./app.554c1b80.js";const p={},c=o("h1",{id:"managing-your-bot-process-with-pm2",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#managing-your-bot-process-with-pm2","aria-hidden":"true"},"#"),l(" Managing your bot process with PM2")],-1),u=o("p",null,'PM2 is a process manager. It manages your applications\' states, so you can start, stop, restart, and delete processes. It offers features such as monitoring running processes and setting up a "start with operating system" (be that Windows, Linux, or Mac) so your processes start when you boot your system.',-1),d=o("h2",{id:"installation",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#installation","aria-hidden":"true"},"#"),l(" Installation")],-1),h=o("p",null,"You can install PM2 via the following command:",-1),m=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"npm"),l(),o("span",{class:"token function"},"install"),l(" --global pm2\n")])])],-1),g=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"yarn"),l(" global "),o("span",{class:"token function"},"add"),l(" pm2\n")])])],-1),f=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"pnpm"),l(),o("span",{class:"token function"},"add"),l(" --global pm2\n")])])],-1),b=i('<h2 id="starting-your-app" tabindex="-1"><a class="header-anchor" href="#starting-your-app" aria-hidden="true">#</a> Starting your app</h2><p>After you install PM2, the easiest way you can start your app is by going to the directory your bot is in and then run the following:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pm2 start your-app-name.js\n</code></pre></div><h3 id="additional-notes" tabindex="-1"><a class="header-anchor" href="#additional-notes" aria-hidden="true">#</a> Additional notes</h3><p>The <code>pm2 start</code> script allows for more optional command-line arguments.</p><ul><li><code>--name</code>: This allows you to set the name of your process when listing it up with <code>pm2 list</code> or <code>pm2 monit</code>:</li></ul><div class="language-bash ext-sh"><pre class="language-bash"><code>pm2 start your-app-name.js --name <span class="token string">&quot;Some cool name&quot;</span>\n</code></pre></div><ul><li><code>--watch</code>: This option will automatically restart your process as soon as a file change is detected, which can be useful for development environments:</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pm2 start your-app-name.js --watch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',9),v={class:"custom-container tip"},y=o("p",{class:"custom-container-title"},"TIP",-1),w=l("The "),k=o("code",null,"pm2 start",-1),x=l(" command can take more optional parameters, but only these two are relevant. If you want to see all the parameters available, you can check the documentation of pm2 "),T={href:"https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/",target:"_blank",rel:"noopener noreferrer"},I=l("here"),P=l("."),M=i('<p>Once the process launches with pm2, you can run <code>pm2 monit</code> to monitor all console outputs from the processes started by pm2. This accounts for any <code>console.log()</code> in your code or outputted errors.</p><p>In a similar fashion to how you start the process, running <code>pm2 stop</code> will stop the current process without removing it from PM2&#39;s interface:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pm2 stop your-app-name.js\n</code></pre></div><h2 id="setting-up-booting-with-your-system" tabindex="-1"><a class="header-anchor" href="#setting-up-booting-with-your-system" aria-hidden="true">#</a> Setting up booting with your system</h2><p>Perhaps one of the more useful features of PM2 is being able to boot up with your Operating System. This feature will ensure that your bot processes will always be started after an (unexpected) reboot (e.g., after a power outage).</p><p>The initial steps differ per OS. In this guide, we&#39;ll cover those for Windows and Linux/MacOS.</p><h3 id="initial-steps-for-windows" tabindex="-1"><a class="header-anchor" href="#initial-steps-for-windows" aria-hidden="true">#</a> Initial steps for Windows</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Run these from an administrative command prompt to avoid getting hit with a bunch of UAC dialogs.</p></div>',8),_=l("Install the "),S={href:"https://www.npmjs.com/package/pm2-windows-service",target:"_blank",rel:"noopener noreferrer"},A=l("pm2-windows-service"),O=l(" package from npm:"),j=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"npm"),l(),o("span",{class:"token function"},"install"),l(" --global pm2-windows-service\n")])])],-1),q=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"yarn"),l(" global "),o("span",{class:"token function"},"add"),l(" pm2-windows-service\n")])])],-1),L=o("div",{class:"language-bash ext-sh"},[o("pre",{class:"language-bash"},[o("code",null,[o("span",{class:"token function"},"pnpm"),l(),o("span",{class:"token function"},"add"),l(" --global pm2-windows-service\n")])])],-1),Y=i('<p><strong>After installation has finished, install the service by running the following command:</strong></p><div class="language-bash ext-sh"><pre class="language-bash"><code>pm2-service-install\n</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You can use the <code>-n</code> parameter to set the service name: <code>pm2-service-install -n &quot;the-service-name&quot;</code></p></div><h3 id="initial-steps-for-linux-macos" tabindex="-1"><a class="header-anchor" href="#initial-steps-for-linux-macos" aria-hidden="true">#</a> Initial steps for Linux/MacOS</h3><p>You&#39;ll need a start script, which you can get by running the following command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># Detects the available init system, generates the config, and enables startup system</span>\npm2 startup\n</code></pre></div><p>Or, if you want to specify your machine manually, select one of the options with the command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pm2 startup <span class="token punctuation">[</span>ubuntu <span class="token operator">|</span> ubuntu14 <span class="token operator">|</span> ubuntu12 <span class="token operator">|</span> centos <span class="token operator">|</span> centos6 <span class="token operator">|</span> arch <span class="token operator">|</span> oracle <span class="token operator">|</span> amazon <span class="token operator">|</span> macos <span class="token operator">|</span> darwin <span class="token operator">|</span> freesd <span class="token operator">|</span> systemd <span class="token operator">|</span> systemv <span class="token operator">|</span> upstart <span class="token operator">|</span> launchd <span class="token operator">|</span> rcd <span class="token operator">|</span> openrc<span class="token punctuation">]</span>\n</code></pre></div><p>The output of running one of the commands listed above will output a command for you to run with all environment variables and options configured.</p><p><strong>Example output for an Ubuntu user:</strong></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token punctuation">[</span>PM2<span class="token punctuation">]</span> You have to run this <span class="token builtin class-name">command</span> as root. Execute the following command:\n      <span class="token function">sudo</span> <span class="token function">su</span> -c &quot;env <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/home/user/.nvm/versions/node/v8.9/bin pm2 startup ubuntu -u user --hp /home/user\n</code></pre></div><p>After running that command, you can continue to the next step.</p><h3 id="saving-the-current-process-list" tabindex="-1"><a class="header-anchor" href="#saving-the-current-process-list" aria-hidden="true">#</a> Saving the current process list</h3><p>To save the current process list so it will automatically get started after a restart, run the following command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pm2 save\n</code></pre></div><p>To disable this, you can run the following command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pm2 unstartup\n</code></pre></div>',17);p.render=function(l,i){const p=a("CodeGroupItem"),C=a("CodeGroup"),W=a("OutboundLink");return s(),e(r,null,[c,u,d,h,n(C,null,{default:t((()=>[n(p,{title:"npm"},{default:t((()=>[m])),_:1}),n(p,{title:"yarn"},{default:t((()=>[g])),_:1}),n(p,{title:"pnpm"},{default:t((()=>[f])),_:1})])),_:1}),b,o("div",v,[y,o("p",null,[w,k,x,o("a",T,[I,n(W)]),P])]),M,o("p",null,[o("strong",null,[_,o("a",S,[A,n(W)]),O])]),n(C,null,{default:t((()=>[n(p,{title:"npm"},{default:t((()=>[j])),_:1}),n(p,{title:"yarn"},{default:t((()=>[q])),_:1}),n(p,{title:"pnpm"},{default:t((()=>[L])),_:1})])),_:1}),Y],64)};export{p as default};
