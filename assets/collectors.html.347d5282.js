import{r as n,o as s,c as a,a as t,b as e,w as p,F as o,d as c,f as l}from"./app.554c1b80.js";const i={},u=t("h1",{id:"collectors",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#collectors","aria-hidden":"true"},"#"),c(" Collectors")],-1),r=t("h2",{id:"message-collectors",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#message-collectors","aria-hidden":"true"},"#"),c(" Message collectors")],-1),k=t("code",null,"Collector",-1),m=c("s"),d=c(' are useful to enable your bot to obtain *additional* input after the first command was sent. An example would be initiating a quiz, where the bot will "await" a correct response from somebody.'),h=l('<h3 id="basic-message-collector" tabindex="-1"><a class="header-anchor" href="#basic-message-collector" aria-hidden="true">#</a> Basic message collector</h3><p>For now, let&#39;s take the example that they have provided us:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// `m` is a message object that will be passed through the filter function</span>\n<span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token parameter">m</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;discord&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> collector <span class="token operator">=</span> interaction<span class="token punctuation">.</span>channel<span class="token punctuation">.</span><span class="token function">createMessageCollector</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;collect&#39;</span><span class="token punctuation">,</span> <span class="token parameter">m</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token parameter">collected</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>collected<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> items</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',3),b=c("You can provide a "),g=t("code",null,"filter",-1),f=c(" key to the object parameter of "),w=t("code",null,"createMessageCollector()",-1),y=c(". The value to this key should be a function that returns a boolean value to indicate if this message should be collected or not. To check for multiple conditions in your filter you can connect them using "),v={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#logical_operators",target:"_blank",rel:"noopener noreferrer"},x=c("logical operators"),j=c(". If you don't provide a filter all messages in the channel the collector was started on will be collected."),q=c("Note that the above example uses "),T={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#function_body",target:"_blank",rel:"noopener noreferrer"},C=c("implicit return"),z=c(" for the filter function and passes it to the options object using the "),I={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#property_definitions",target:"_blank",rel:"noopener noreferrer"},M=c("object property shorthand"),_=c(" notation."),U=l('<p>If a message passes through the filter, it will trigger the <code>collect</code> event for the <code>collector</code> you&#39;ve created. This message is then passed into the event listener as <code>collected</code> and the provided function is executed. In the above example, you simply log the message. Once the collector finishes collecting based on the provided end conditions the <code>end</code> event emits.</p><p>You can control when a collector ends by supplying additional option keys when creating a collector:</p><ul><li><code>time</code>: Amount of time in milliseconds the collector should run for</li><li><code>max</code>: Number of messages to successfully pass the filter</li><li><code>maxProcessed</code>: Number of messages encountered (no matter the filter result)</li></ul><p>The benefit of using an event-based collector over <code>.awaitMessages()</code> (its promise-based counterpart) is that you can do something directly after each message is collected, rather than just after the collector ended. You can also stop the collector manually by calling <code>collector.stop()</code>.</p><h3 id="await-messages" tabindex="-1"><a class="header-anchor" href="#await-messages" aria-hidden="true">#</a> Await messages</h3>',5),$=c("Using "),A=c(" can be easier if you understand Promises, and it allows you to have cleaner code overall. It is essentially identical to "),P=c(", except promisified. However, the drawback of using this method is that you cannot do things before the Promise is resolved or rejected, either by an error or completion. However, it should do for most purposes, such as awaiting the correct response in a quiz. Instead of taking their example, let's set up a basic quiz command using the "),R=t("code",null,".awaitMessages()",-1),S=c(" feature."),O=l('<p>First, you&#39;ll need some questions and answers to choose from, so here&#39;s a basic set:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token property">&quot;question&quot;</span><span class="token operator">:</span> <span class="token string">&quot;What color is the sky?&quot;</span><span class="token punctuation">,</span>\n\t\t<span class="token property">&quot;answers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token property">&quot;question&quot;</span><span class="token operator">:</span> <span class="token string">&quot;How many letters are there in the alphabet?&quot;</span><span class="token punctuation">,</span>\n\t\t<span class="token property">&quot;answers&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;26&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;twenty-six&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;twenty six&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;twentysix&quot;</span><span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>The provided set allows for responder error with an array of answers permitted. Ideally, it would be best to place this in a JSON file, which you can call <code>quiz.json</code> for simplicity.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> quiz <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./quiz.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> quiz<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> quiz<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> item<span class="token punctuation">.</span>answers<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">answer</span> <span class="token operator">=&gt;</span> answer<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> response<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\ninteraction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>question<span class="token punctuation">,</span> <span class="token punctuation">{</span> fetchReply<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tinteraction<span class="token punctuation">.</span>channel<span class="token punctuation">.</span><span class="token function">awaitMessages</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span> errors<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;time&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">collected</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\tinteraction<span class="token punctuation">.</span><span class="token function">followUp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>collected<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>author<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> got the correct answer!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">collected</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t\tinteraction<span class="token punctuation">.</span><span class="token function">followUp</span><span class="token punctuation">(</span><span class="token string">&#39;Looks like nobody got the answer this time.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',4),N={class:"custom-container tip"},L=t("p",{class:"custom-container-title"},"TIP",-1),F=c("If you don't understand how "),J=t("code",null,".some()",-1),W=c(" works, you can read about it in more detail "),Y={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some",target:"_blank",rel:"noopener noreferrer"},B=c("here"),E=c("."),D=t("p",null,[c("In this filter, you iterate through the answers to find what you want. You would like to ignore the case because simple typos can happen, so you convert each answer to its lowercase form and check if it's equal to the response in lowercase form as well. In the options section, you only want to allow one answer to pass through, hence the "),t("code",null,"max: 1"),c(" setting.")],-1),H=t("p",null,[c("The filter looks for messages that match one of the answers in the array of possible answers to pass through the collector. The options (the second parameter) specifies that only a maximum of one message can go through the filter successfully before the Promise successfully resolves. The errors section specifies that time will cause it to error out, which will cause the Promise to reject if one correct answer is not received within the time limit of one minute. As you can see, there is no "),t("code",null,"collect"),c(" event, so you are limited in that regard.")],-1),G=t("h2",{id:"reaction-collectors",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#reaction-collectors","aria-hidden":"true"},"#"),c(" Reaction collectors")],-1),K=t("h3",{id:"basic-reaction-collector",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#basic-reaction-collector","aria-hidden":"true"},"#"),c(" Basic reaction collector")],-1),Q=c("These work quite similarly to message collectors, except that you apply them on a message rather than a channel. This example uses the "),V=c(" method. The filter will check for the 👍 emoji–in the default skin tone specifically, so be wary of that. It will also check that the person who reacted shares the same id as the author of the original message that the collector was assigned to."),X=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reaction<span class="token punctuation">,</span> user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> reaction<span class="token punctuation">.</span>emoji<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;👍&#39;</span> <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> message<span class="token punctuation">.</span>author<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> collector <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">createReactionCollector</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;collect&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">reaction<span class="token punctuation">,</span> user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>reaction<span class="token punctuation">.</span>emoji<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token parameter">collected</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>collected<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> items</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="await-reactions" tabindex="-1"><a class="header-anchor" href="#await-reactions" aria-hidden="true">#</a> Await reactions</h3>',2),Z=c(" works almost the same as a reaction collector, except it is Promise-based. The same differences apply as with channel collectors."),nn=l('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reaction<span class="token punctuation">,</span> user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> reaction<span class="token punctuation">.</span>emoji<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;👍&#39;</span> <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>id <span class="token operator">===</span> message<span class="token punctuation">.</span>author<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmessage<span class="token punctuation">.</span><span class="token function">awaitReactions</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span> errors<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;time&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">collected</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>collected<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">collected</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">After a minute, only </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>collected<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> out of 4 reacted.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="interaction-collectors" tabindex="-1"><a class="header-anchor" href="#interaction-collectors" aria-hidden="true">#</a> Interaction collectors</h2><p>The third type of collector allows you to collect interactions; such as when users activate a slash command or click on a button in a message.</p><h3 id="basic-message-component-collector" tabindex="-1"><a class="header-anchor" href="#basic-message-component-collector" aria-hidden="true">#</a> Basic message component collector</h3><p>Collecting interactions from message components works similarly to reaction collectors. In the following example, you will check that the interaction came from a button, and that the user clicking the button is the same user that initiated the command.</p><p>One important difference to note with interaction collectors is that Discord expects a response to <em>all</em> interactions within 3 seconds - even ones that you don&#39;t want to collect. For this reason, you may wish to <code>.deferUpdate()</code> all interactions in your filter, or not use a filter at all and handle this behavior in the <code>collect</code> event.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> collector <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">createMessageComponentCollector</span><span class="token punctuation">(</span><span class="token punctuation">{</span> componentType<span class="token operator">:</span> <span class="token string">&#39;BUTTON&#39;</span><span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;collect&#39;</span><span class="token punctuation">,</span> <span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id <span class="token operator">===</span> interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\ti<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> clicked on the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token punctuation">.</span>customId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> button.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\ti<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">These buttons aren&#39;t for you!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> ephemeral<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncollector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token parameter">collected</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Collected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>collected<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> interactions.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="await-message-component" tabindex="-1"><a class="header-anchor" href="#await-message-component" aria-hidden="true">#</a> Await message component</h3><p>As before, this works similarly to the message component collector, except it is Promise-based.</p><p>Unlike other Promise-based collectors, this method will only ever collect one interaction that passes the filter. If no interactions are collected before the time runs out, the Promise will reject. This behavior aligns with Discord&#39;s requirement that actions should immediately receive a response. In this example, you will use <code>.deferUpdate()</code> on all interactions in the filter.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\ti<span class="token punctuation">.</span><span class="token function">deferUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> i<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id <span class="token operator">===</span> interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmessage<span class="token punctuation">.</span><span class="token function">awaitMessageComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter<span class="token punctuation">,</span> componentType<span class="token operator">:</span> <span class="token string">&#39;SELECT_MENU&#39;</span><span class="token punctuation">,</span> time<span class="token operator">:</span> <span class="token number">60000</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> interaction<span class="token punctuation">.</span><span class="token function">editReply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">You selected </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">No interactions were collected.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',11);i.render=function(c,l){const i=n("DocsLink"),sn=n("OutboundLink");return s(),a(o,null,[u,r,t("p",null,[e(i,{path:"class/Collector"},{default:p((()=>[k,m])),_:1}),d]),h,t("p",null,[b,g,f,w,y,t("a",v,[x,e(sn)]),j]),t("p",null,[q,t("a",T,[C,e(sn)]),z,t("a",I,[M,e(sn)]),_]),U,t("p",null,[$,e(i,{path:"class/TextChannel?scrollTo=awaitMessages",type:"method"}),A,e(i,{path:"class/TextChannel?scrollTo=createMessageCollector",type:"method"}),P,R,S]),O,t("div",N,[L,t("p",null,[F,J,W,t("a",Y,[B,e(sn)]),E])]),D,H,G,K,t("p",null,[Q,e(i,{path:"class/Message?scrollTo=createReactionCollector",type:"method"}),V]),X,t("p",null,[e(i,{path:"class/Message?scrollTo=awaitReactions",type:"method"}),Z]),nn],64)};export{i as default};
