import{r as n,o as s,c as a,a as t,b as p,w as e,F as o,d as c,f as i}from"./app.554c1b80.js";const l={},u=t("h1",{id:"replying-to-slash-commands",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#replying-to-slash-commands","aria-hidden":"true"},"#"),c(" Replying to slash commands")],-1),r=t("p",null,"Discord provides developers the option to create client-integrated slash commands. In this section, we'll cover how to respond to these commands using discord.js!",-1),k={class:"custom-container tip"},d=t("p",{class:"custom-container-title"},"TIP",-1),m=c("You need at least one slash command registered on your application to continue with the instructions on this page. If you haven't done that yet, refer to "),g=c("the previous page"),h=c("."),b=i('<h2 id="receiving-interactions" tabindex="-1"><a class="header-anchor" href="#receiving-interactions" aria-hidden="true">#</a> Receiving interactions</h2><p>Every slash command is an <code>interaction</code>, so to respond to a command, you need to set up an event listener that will execute code when your application receives an interaction:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>interaction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>However, not every interaction is a slash command (e.g. <code>MessageComponent</code>s). Make sure to only receive slash commands by making use of the <code>CommandInteraction#isCommand()</code> method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>interaction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="responding-to-a-command" tabindex="-1"><a class="header-anchor" href="#responding-to-a-command" aria-hidden="true">#</a> Responding to a command</h2><p>There are multiple ways of responding to a slash command, each of these are covered in the following segments. The most common way of sending a response is by using the <code>CommandInteraction#reply()</code> method:</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Initially an interaction token is only valid for three seconds, so that&#39;s the timeframe in which you are able to use the <code>CommandInteraction#reply()</code> method. Responses that require more time (&quot;Deferred Responses&quot;) are explained later in this page.</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Restart your bot and then send the command to a channel your bot has access to. If all goes well, you should see something like this:</p>',10),v=c("ping"),f=c(" Pong! "),y=i('<p>You&#39;ve successfully sent a response to a slash command! This is only the beginning, there&#39;s more to look out for so let&#39;s move on to further ways of replying to a command!</p><h2 id="ephemeral-responses" tabindex="-1"><a class="header-anchor" href="#ephemeral-responses" aria-hidden="true">#</a> Ephemeral responses</h2><p>You may not always want everyone who has access to the channel to see a slash command&#39;s response. Thankfully, Discord implemented a way to hide messages from everyone but the executor of the slash command. This type of message is called <code>ephemeral</code> and can be set by using <code>ephemeral: true</code> in the <code>InteractionReplyOptions</code>, as follows:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">,</span> ephemeral<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Now when you run your command again, you should see something like this:</p>',5),w=c("ping"),j=c(" Pong! "),I=i('<h2 id="editing-responses" tabindex="-1"><a class="header-anchor" href="#editing-responses" aria-hidden="true">#</a> Editing responses</h2><p>After you&#39;ve sent an initial response, you may want to edit that response for various reasons. This can be achieved with the <code>CommandInteraction#editReply()</code> method:</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>After the initial response, an interaction token is valid for 15 minutes, so this is the timeframe in which you can edit the response and send follow-up messages.</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> wait <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">editReply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong again!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="deferred-responses" tabindex="-1"><a class="header-anchor" href="#deferred-responses" aria-hidden="true">#</a> Deferred responses</h2><p>As previously mentioned, you have three seconds to respond to an interaction before its token becomes invalid. But what if you have a command that performs a task which takes longer than three seconds before being able to reply?</p><p>In this case, you can make use of the <code>CommandInteraction#deferReply()</code> method, which triggers the <code>&lt;application&gt; is thinking...</code> message and also acts as initial response. This allows you 15 minutes to complete your tasks before responding.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> wait <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>setTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclient<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">deferReply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">editReply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>If you have a command that performs longer tasks, be sure to call <code>deferReply()</code> as early as possible.</p><p>You can also pass an <code>ephemeral</code> flag to the <code>InteractionDeferOptions</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">deferReply</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ephemeral<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="follow-ups" tabindex="-1"><a class="header-anchor" href="#follow-ups" aria-hidden="true">#</a> Follow-ups</h2><p>Replying to slash commands is great and all, but what if you want to send multiple responses instead of just one? Follow-up messages got you covered, you can use <code>CommandInteraction#followUp()</code> to send multiple responses:</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>After the initial response, an interaction token is valid for 15 minutes, so this is the timeframe in which you can edit the response and send follow-up messages.</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName <span class="token operator">===</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">followUp</span><span class="token punctuation">(</span><span class="token string">&#39;Pong again!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>If you run this code you should end up having something that looks like this:</p>',16),C=c("ping"),x=c(" Pong! "),R=c("Pong!"),N=c(" Pong again! "),P=i('<p>You can also pass an <code>ephemeral</code> flag to the <code>InteractionReplyOptions</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">followUp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token string">&#39;Pong again!&#39;</span><span class="token punctuation">,</span> ephemeral<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',2),D=c("ping"),_=c(" Pong! "),S=c("Pong!"),O=c(" Pong again! "),T=i('<p>That&#39;s all, now you know everything there is to know on how to reply to slash commands!</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Interaction responses can use masked links (e.g. <code>[text](http://site.com)</code>) and global emojis in the message content.</p></div><h2 id="parsing-options" tabindex="-1"><a class="header-anchor" href="#parsing-options" aria-hidden="true">#</a> Parsing options</h2><h3 id="command-options" tabindex="-1"><a class="header-anchor" href="#command-options" aria-hidden="true">#</a> Command options</h3><p>In this section, we&#39;ll cover how to access the values of a command&#39;s options. Let&#39;s assume you have a command that contains the following options:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> SlashCommandBuilder <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;@discordjs/builders&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SlashCommandBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Replies with Pong!&#39;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addStringOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Enter a string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addIntegerOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;int&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Enter an integer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addNumberOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;num&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Enter a number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addBooleanOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;choice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Select a boolean&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addUserOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Select a user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addChannelOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;destination&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Select a channel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addRoleOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;muted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Select a role&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">.</span><span class="token function">addMentionableOption</span><span class="token punctuation">(</span><span class="token parameter">option</span> <span class="token operator">=&gt;</span> option<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;mentionable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">&#39;Mention something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>You can <code>get()</code> these options from the <code>CommandInteractionOptionResolver</code> as shown below:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> string <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> integer <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">&#39;int&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> number <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">&#39;num&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> boolean <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&#39;choice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> member <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getMember</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> channel <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token string">&#39;destination&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> role <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token string">&#39;muted&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mentionable <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getMentionable</span><span class="token punctuation">(</span><span class="token string">&#39;mentionable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>string<span class="token punctuation">,</span> integer<span class="token punctuation">,</span> boolean<span class="token punctuation">,</span> user<span class="token punctuation">,</span> member<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> role<span class="token punctuation">,</span> mentionable<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',8),Y={class:"custom-container tip"},M=t("p",{class:"custom-container-title"},"TIP",-1),A=c("If you want the Snowflake of a structure instead, grab the option via "),U=t("code",null,"get()",-1),q=c(" and access the Snowflake via the "),E=t("code",null,"value",-1),$=c(" property. Note that you should use "),B=t("code",null,"const { value: name } = ...",-1),L=c(" here to "),F={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",target:"_blank",rel:"noopener noreferrer"},G=c("destructure and rename"),W=c(" the value obtained from the "),z=c(" structure to avoid identifier name conflicts."),H=i('<h3 id="subcommands" tabindex="-1"><a class="header-anchor" href="#subcommands" aria-hidden="true">#</a> Subcommands</h3><p>If you have a command that contains subcommands, you can parse them in a very similar way as to the above examples. The following snippet details the logic needed to parse the subcommands and respond accordingly using the <code>CommandInteractionOptionResolver#getSubcommand()</code> method:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>client<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;interactionCreate&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">interaction</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interaction<span class="token punctuation">.</span><span class="token function">isCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>commandName <span class="token operator">===</span> <span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getSubcommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> user <span class="token operator">=</span> interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Username: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\nID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Your username: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\nYour ID: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>interaction<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">getSubcommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\nTotal members: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>interaction<span class="token punctuation">.</span>guild<span class="token punctuation">.</span>memberCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="fetching-and-deleting-responses" tabindex="-1"><a class="header-anchor" href="#fetching-and-deleting-responses" aria-hidden="true">#</a> Fetching and deleting responses</h2><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>You <em>cannot</em> delete an ephemeral message.</p></div><p>In addition to replying to a slash command, you may also want to delete the initial reply. You can use <code>CommandInteraction#deleteReply()</code> for this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">deleteReply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Lastly, you may require the <code>Message</code> object of a reply for various reasons, such as adding reactions. You can use the <code>CommandInteraction#fetchReply()</code> method to fetch the <code>Message</code> instance of an initial response:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">reply</span><span class="token punctuation">(</span><span class="token string">&#39;Pong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword">await</span> interaction<span class="token punctuation">.</span><span class="token function">fetchReply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',9);l.render=function(c,i){const l=n("RouterLink"),J=n("DiscordInteraction"),K=n("DiscordMessage"),Q=n("DiscordMessages"),V=n("OutboundLink"),X=n("DocsLink");return s(),a(o,null,[u,r,t("div",k,[d,t("p",null,[m,p(l,{to:"/interactions/registering-slash-commands.html"},{default:e((()=>[g])),_:1}),h])]),b,p(Q,null,{default:e((()=>[p(K,{profile:"bot"},{interactions:e((()=>[p(J,{profile:"user",command:!0},{default:e((()=>[v])),_:1})])),default:e((()=>[f])),_:1})])),_:1}),y,p(Q,null,{default:e((()=>[p(K,{profile:"bot"},{interactions:e((()=>[p(J,{profile:"user",command:!0,ephemeral:!0},{default:e((()=>[w])),_:1})])),default:e((()=>[j])),_:1})])),_:1}),I,p(Q,null,{default:e((()=>[p(K,{profile:"bot"},{interactions:e((()=>[p(J,{profile:"user",command:!0},{default:e((()=>[C])),_:1})])),default:e((()=>[x])),_:1}),p(K,{profile:"bot"},{interactions:e((()=>[p(J,{profile:"bot"},{default:e((()=>[R])),_:1})])),default:e((()=>[N])),_:1})])),_:1}),P,p(Q,null,{default:e((()=>[p(K,{profile:"bot"},{interactions:e((()=>[p(J,{profile:"user",command:!0},{default:e((()=>[D])),_:1})])),default:e((()=>[_])),_:1}),p(K,{profile:"bot"},{interactions:e((()=>[p(J,{profile:"bot",ephemeral:!0},{default:e((()=>[S])),_:1})])),default:e((()=>[O])),_:1})])),_:1}),T,t("div",Y,[M,t("p",null,[A,U,q,E,$,B,L,t("a",F,[G,p(V)]),W,p(X,{path:"typedef/CommandInteractionOption"}),z])]),H],64)};export{l as default};
