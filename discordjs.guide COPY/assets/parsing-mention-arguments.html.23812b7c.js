import{r as n,o as s,c as a,b as e,w as t,a as o,F as p,f as c,d as i}from"./app.554c1b80.js";const l={},r=c('<h1 id="parsing-mentions" tabindex="-1"><a class="header-anchor" href="#parsing-mentions" aria-hidden="true">#</a> Parsing mentions</h1><p>Discord.js is already geared to help you handle mentions using <code>message.mentions</code>. However, there are situations where using <code>message.mentions</code> can lead to a few problems, in which case you may want to parse them on your own.<br> For example, you cannot tell where the mention is located in the message&#39;s content, or if the same user/role/channel was mentioned more than once.</p><h2 id="how-discord-mentions-work" tabindex="-1"><a class="header-anchor" href="#how-discord-mentions-work" aria-hidden="true">#</a> How Discord mentions work</h2><p>Discord uses a special syntax to embed mentions in a message. For user mentions, it is the user&#39;s ID with <code>&lt;@</code> at the start and <code>&gt;</code> at the end, like this: <code>&lt;@86890631690977280&gt;</code>. If they have a nickname, there will also be a <code>!</code> after the <code>@</code>.<br> Role mentions and channel mentions work similarly. Role mentions look like <code>&lt;@&amp;134362454976102401&gt;</code> and channel mentions like <code>&lt;#222197033908436994&gt;</code>.</p><p>That means when you receive a message from the Discord API, and it contains mentions, the message&#39;s content will contain that special syntax.<br> If you send</p>',5),u=i(" I think we should add "),d=i("GoodPerson"),m=i(" to the "),h=i("Mod"),k=i(" role. "),b=c('<p>then the <code>message.content</code> for that message will look something like this</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;I think we should add &lt;@86890631690977280&gt; to the &lt;@&amp;134362454976102401&gt; role.&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><p>Instead of using <code>message.mentions</code> to find say, a user, you will have to do it manually, which requires a few simple steps.</p><p>Putting it into a function will make it easily reusable. We will use the name <code>getUserFromMention</code> here.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getUserFromMention</span><span class="token punctuation">(</span><span class="token parameter">mention</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mention<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>mention<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;@&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mention<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tmention <span class="token operator">=</span> mention<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>mention<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tmention <span class="token operator">=</span> mention<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\t<span class="token keyword">return</span> client<span class="token punctuation">.</span>users<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mention<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>As you can see, it is a relatively straightforward function. It essentially just works itself through the structure of the mention bit by bit:</p><ol><li>Check if the mention starts with the <code>&lt;@</code> and ends with a <code>&gt;</code> and then remove those.</li><li>If the user has a nickname and their mention contains a <code>!</code>, remove that as well.</li><li>Only the ID should be left now, so use that to fetch the user from the <code>client.users.cache</code> Collection. Whenever it encounters an error with the mention (i.e., invalid structure), it merely returns <code>undefined</code> to signal the mention is invalid.</li></ol>',8),g={class:"custom-container tip"},f=o("p",{class:"custom-container-title"},"TIP",-1),w=i("The "),y=o("code",null,".slice()",-1),v=i(" method is used with a negative number. You can read "),x={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice",target:"_blank",rel:"noopener noreferrer"},j=i("MDN's documentation"),I=i(" for information on how that works."),R=o("h3",{id:"using-regular-expressions",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#using-regular-expressions","aria-hidden":"true"},"#"),i(" Using Regular Expressions")],-1),T=o("p",null,'Previously you learned how to use rudimentary string-related functions to turn the special mention syntax Discord uses into a proper discord.js User object. But using Regular Expressions (aka "RegEx" or "RegExp"), you can condense all that logic into a single line! Crazy, right?',-1),D={class:"custom-container tip"},E=o("p",{class:"custom-container-title"},"TIP",-1),M=i("For a more detailed explanation, consult "),U={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",target:"_blank",rel:"noopener noreferrer"},_=i("MDN's documentation"),P=i(" on regular expressions."),S=c("<p>The RegEx you will use for user mentions will look something like this: <code>/^&lt;@!?(\\d+)&gt;$/</code>. Here is how the RegEx works:</p><ol><li>The <code>^</code> at the beginning and the <code>$</code> at the end means the mention has to take up the entire string.</li><li>You have the typical <code>&lt;@</code> and <code>&gt;</code> at the beginning and end.</li><li>The <code>?</code> after the <code>!</code> indicates that the <code>!</code> is optional.</li><li><code>\\d+</code> means the RegEx will look for multiple digits, which will be the ID.</li><li>The parentheses around the <code>\\d+</code> create a capture group, which allows you to get the ID out of the mention.</li></ol><p>Using the <code>.match()</code> method on strings, you can get the capture group&#39;s values, i.e., the mention&#39;s ID.</p>",3),F={class:"custom-container tip"},N=o("p",{class:"custom-container-title"},"TIP",-1),W=i("discord.js has "),A=i("built-in patterns"),C=i(" for matching mentions."),H=c('<p>Updating your <code>getUserFromMention</code> function to use RegEx gives you this:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> MessageMentions<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token constant">USERS_PATTERN</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;discord.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">getUserFromMention</span><span class="token punctuation">(</span><span class="token parameter">mention</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// The id is the first and only match found by the RegEx.</span>\n\t<span class="token keyword">const</span> matches <span class="token operator">=</span> mention<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token constant">USERS_PATTERN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// If supplied variable was not a mention, matches will be null instead of an array.</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matches<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">// The first element in the matches array will be the entire mention, not just the ID,</span>\n\t<span class="token comment">// so use index 1.</span>\n\t<span class="token keyword">const</span> id <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> client<span class="token punctuation">.</span>users<span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>That is <em>much</em> shorter, and not all that complicated!</p>',3);l.render=function(c,i){const l=n("DiscordMention"),O=n("DiscordMessage"),z=n("DiscordMessages"),G=n("OutboundLink"),L=n("DocsLink");return s(),a(p,null,[r,e(z,null,{default:t((()=>[e(O,{profile:"user"},{default:t((()=>[u,e(l,null,{default:t((()=>[d])),_:1}),m,e(l,{type:"role","role-color":"#3eaf7c"},{default:t((()=>[h])),_:1}),k])),_:1})])),_:1}),b,o("div",g,[f,o("p",null,[w,y,v,o("a",x,[j,e(G)]),I])]),R,T,o("div",D,[E,o("p",null,[M,o("a",U,[_,e(G)]),P])]),S,o("div",F,[N,o("p",null,[W,e(L,{path:"class/MessageMentions?scrollTo=s-CHANNELS_PATTERN"},{default:t((()=>[A])),_:1}),C])]),H],64)};export{l as default};
